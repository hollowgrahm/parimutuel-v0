"use strict";
(() => {
  // src/contracts/redstone-oracle-registry/common/getDetailsById.ts
  var getDetailsById = ({
    identifier,
    state,
    oraclesType
  }) => {
    if (!identifier) {
      throw new ContractError("Missing oracle identifier");
    }
    const oracleDetails = state[oraclesType][identifier];
    if (!oracleDetails) {
      throw new ContractError(
        `Oracle with identifier ${identifier} does not exist`
      );
    }
    const identifierObject = oraclesType === "nodes" ? { address: identifier } : { id: identifier };
    return { ...oracleDetails, ...identifierObject };
  };

  // src/contracts/redstone-oracle-registry/data-services/read/getDataServiceDetailsById.ts
  var getDataServiceDetailsById = (state, input) => {
    const data = input.data;
    const dataServiceDetails = getDetailsById({
      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
      identifier: data?.id,
      state,
      oraclesType: "dataServices"
    });
    return { result: dataServiceDetails };
  };

  // src/contracts/redstone-oracle-registry/common/listWithPagination.ts
  var listWithPagination = (paginationData, oracles) => {
    let oraclesArray = Object.keys(oracles);
    if (paginationData?.startAfter) {
      oraclesArray = oraclesArray.slice(paginationData.startAfter);
    }
    if (paginationData?.limit) {
      oraclesArray = oraclesArray.slice(0, paginationData.limit);
    }
    return oraclesArray;
  };

  // src/contracts/redstone-oracle-registry/data-services/read/listDataServices.ts
  var listDataServices = (state, input) => {
    const paginationData = input.data;
    const dataServicesArray = listWithPagination(
      paginationData,
      state.dataServices
    );
    return { result: dataServicesArray };
  };

  // src/contracts/redstone-oracle-registry/data-services/write/createDataService.ts
  var createDataService = (state, action) => {
    const data = action.input.data;
    const isValidData = data.id && data.name && data.logo && data.description && data.manifestTxId;
    if (!isValidData) {
      throw new ContractError("Invalid data feed data");
    }
    const { id, ...restData } = data;
    if (state.dataServices[id]) {
      throw new ContractError(`Data feed with id ${id} already exists`);
    }
    state.dataServices[id] = {
      ...restData,
      admin: action.caller
    };
    return { state };
  };

  // src/contracts/redstone-oracle-registry/data-services/write/updateDataService.ts
  var updateDataService = (state, action) => {
    const data = action.input.data;
    const { id, update } = data;
    const currentDataServiceState = state.dataServices[id];
    if (!currentDataServiceState) {
      throw new ContractError(`Data feed with id ${id} not found`);
    }
    if (action.caller !== currentDataServiceState.admin) {
      throw new ContractError("Only admin can update data feed");
    }
    state.dataServices[id] = {
      ...currentDataServiceState,
      ...update
    };
    return { state };
  };

  // src/contracts/redstone-oracle-registry/evolve.ts
  var evolve = (state, action) => {
    if (!state.canEvolve) {
      throw new ContractError("Contract cannot evolve");
    }
    if (!state.contractAdmins.some((admin) => admin === action.caller)) {
      throw new ContractError("Only the admin can evolve a contract");
    }
    const data = action.input.data;
    state.evolve = data.evolveTransactionId;
    return { state };
  };

  // src/contracts/redstone-oracle-registry/nodes/read/getNodeDetails.ts
  var getNodeDetails = (state, input) => {
    const data = input.data;
    const nodesDetails = getDetailsById({
      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
      identifier: data?.address,
      state,
      oraclesType: "nodes"
    });
    return { result: nodesDetails };
  };

  // src/contracts/redstone-oracle-registry/nodes/read/listNodes.ts
  var listNodes = (state, input) => {
    const paginationData = input.data;
    const nodesArray = listWithPagination(paginationData, state.nodes);
    return { result: nodesArray };
  };

  // src/contracts/redstone-oracle-registry/nodes/write/registerNode.ts
  var registerNode = (state, action) => {
    const data = action.input.data;
    const caller = action.caller;
    const isValidData = data.name && data.logo && data.description && data.dataServiceId && data.evmAddress && data.ipAddress && data.ecdsaPublicKey && data.arweavePublicKey;
    if (!isValidData) {
      throw new ContractError("Invalid node data");
    }
    if (state.nodes[caller]) {
      throw new ContractError(`Node with owner ${caller} already exists`);
    }
    if (!state.dataServices[data.dataServiceId]) {
      throw new ContractError(
        `Data feed with id ${data.dataServiceId} does not exist`
      );
    }
    state.nodes[caller] = data;
    return { state };
  };

  // src/contracts/redstone-oracle-registry/nodes/write/removeNode.ts
  var removeNode = (state, caller) => {
    const currentNodeState = state.nodes[caller];
    if (!currentNodeState) {
      throw new ContractError(`Node with owner ${caller} not found`);
    }
    delete state.nodes[caller];
    return { state };
  };

  // src/contracts/redstone-oracle-registry/nodes/write/updateNodeDetails.ts
  var updateNodeDetails = (state, action) => {
    const data = action.input.data;
    const caller = action.caller;
    const currentNodeState = state.nodes[caller];
    if (!currentNodeState) {
      throw new ContractError(`Node with owner ${caller} not found`);
    }
    state.nodes[caller] = {
      ...currentNodeState,
      ...data
    };
    return { state };
  };

  // src/contracts/redstone-oracle-registry/redstone-oracle-registry.contract.ts
  var handle = async (state, action) => {
    const { input } = action;
    switch (input.function) {
      case "listNodes":
        return listNodes(state, input);
      case "getNodeDetails":
        return getNodeDetails(state, input);
      case "registerNode":
        return registerNode(state, action);
      case "updateNodeDetails":
        return updateNodeDetails(state, action);
      case "removeNode":
        return removeNode(state, action.caller);
      case "listDataServices":
        return listDataServices(state, input);
      case "getDataServiceDetailsById":
        return getDataServiceDetailsById(state, input);
      case "createDataService":
        return createDataService(state, action);
      case "updateDataService":
        return updateDataService(state, action);
      case "evolve":
        return evolve(state, action);
      default:
        throw new ContractError(
          // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
          `No function supplied or function not recognized: "${input.function}"`
        );
    }
  };
})();
