import { RedstoneOraclesState } from "@redstone-finance/oracles-smartweave-contracts";
import { SignedDataPackage } from "@redstone-finance/protocol";
import { BigNumber } from "ethers";
import { z } from "zod";
export interface DataPackagesRequestParams {
    dataServiceId: string;
    uniqueSignersCount: number;
    waitForAllGatewaysTimeMs?: number;
    maxTimestampDeviationMS?: number;
    authorizedSigners?: string[];
    dataFeeds: string[];
    urls?: string[];
    historicalTimestamp?: number;
}
export interface DataPackagesResponse {
    [dataFeedId: string]: SignedDataPackage[] | undefined;
}
export interface ValuesForDataFeeds {
    [dataFeedId: string]: BigNumber | undefined;
}
declare const GwResponseSchema: z.ZodRecord<z.ZodString, z.ZodArray<z.ZodObject<{
    dataPoints: z.ZodArray<z.ZodUnion<[z.ZodObject<{
        dataFeedId: z.ZodString;
        value: z.ZodNumber;
        decimals: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        value: number;
        dataFeedId: string;
        decimals?: number | undefined;
    }, {
        value: number;
        dataFeedId: string;
        decimals?: number | undefined;
    }>, z.ZodObject<{
        dataFeedId: z.ZodString;
        value: z.ZodString;
        decimals: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        value: string;
        dataFeedId: string;
        decimals?: number | undefined;
    }, {
        value: string;
        dataFeedId: string;
        decimals?: number | undefined;
    }>]>, "many">;
    timestampMilliseconds: z.ZodNumber;
    signature: z.ZodString;
    dataFeedId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    dataFeedId: string;
    dataPoints: ({
        value: number;
        dataFeedId: string;
        decimals?: number | undefined;
    } | {
        value: string;
        dataFeedId: string;
        decimals?: number | undefined;
    })[];
    timestampMilliseconds: number;
    signature: string;
}, {
    dataFeedId: string;
    dataPoints: ({
        value: number;
        dataFeedId: string;
        decimals?: number | undefined;
    } | {
        value: string;
        dataFeedId: string;
        decimals?: number | undefined;
    })[];
    timestampMilliseconds: number;
    signature: string;
}>, "many">>;
export type GwResponse = Partial<z.infer<typeof GwResponseSchema>>;
export declare const getDataServiceIdForSigner: (oracleState: RedstoneOraclesState, signerAddress: string) => string;
export declare const calculateHistoricalPackagesTimestamp: (deviationCheckOffsetInMinutes: number, baseTimestamp?: number) => number | undefined;
export declare const requestDataPackages: (reqParams: DataPackagesRequestParams) => Promise<DataPackagesResponse>;
export {};
//# sourceMappingURL=request-data-packages.d.ts.map