"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.startSimpleRelayer = void 0;
const utils_1 = require("@redstone-finance/utils");
async function startSimpleRelayer(config, connector) {
    const relayerIterationInterval = Number(config.relayerIterationInterval);
    const updatePriceInterval = Number(config.updatePriceInterval);
    const adapter = await connector.getAdapter();
    let pendingTransactionHash;
    console.log(`Starting contract prices updater with interval ${relayerIterationInterval / 1000} s.`);
    setInterval(async () => {
        {
            (0, utils_1.sendHealthcheckPing)(config.healthcheckPingUrl);
            let txHash;
            try {
                if (pendingTransactionHash != undefined) {
                    return console.log(`Skipping, because there exists a pending transaction: ${pendingTransactionHash}`);
                }
                const timestampAndRound = await adapter.readTimestampAndRound();
                const currentTimestamp = Date.now();
                const timestampDelta = currentTimestamp - timestampAndRound.payload_timestamp;
                const isEnoughTimeElapsedSinceLastUpdate = timestampDelta >= updatePriceInterval;
                if (!isEnoughTimeElapsedSinceLastUpdate) {
                    return console.log(`Skipping, because not enough time has passed to update prices (${timestampDelta / 1000} s. of ${updatePriceInterval / 1000} s.)`);
                }
                const round = timestampAndRound.round ?? -1;
                pendingTransactionHash = "...";
                txHash = await adapter.writePrices(round + 1);
                console.log(`Started updating prices (round: ${round + 1}) with transaction: ${txHash}`);
                pendingTransactionHash = txHash;
                console.log(`Waiting for the transaction's status changes...`);
                await connector.waitForTransaction(txHash);
            }
            catch (error) {
                console.error(error.stack || error);
            }
            finally {
                if (pendingTransactionHash === txHash ||
                    pendingTransactionHash === "...") {
                    pendingTransactionHash = undefined;
                }
            }
        }
    }, relayerIterationInterval);
}
exports.startSimpleRelayer = startSimpleRelayer;
//# sourceMappingURL=start-simple-relayer.js.map