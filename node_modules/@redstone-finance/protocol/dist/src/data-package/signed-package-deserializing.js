"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.recoverDeserializedSignerAddress = exports.recoverSignerAddress = exports.recoverSignerPublicKey = exports.deserializeSignedPackage = void 0;
const utils_1 = require("ethers/lib/utils");
const DataPackage_1 = require("./DataPackage");
function deserializeSignedPackage(plainObject) {
    const signatureBase64 = plainObject.signature;
    if (!signatureBase64) {
        throw new Error("Signature can not be empty");
    }
    const signatureBytes = utils_1.base64.decode(signatureBase64);
    const parsedSignature = (0, utils_1.splitSignature)(signatureBytes);
    const { signature: _, ...unsignedDataPackagePlainObj } = plainObject;
    const unsignedDataPackage = DataPackage_1.DataPackage.fromObj(unsignedDataPackagePlainObj);
    return { signature: parsedSignature, dataPackage: unsignedDataPackage };
}
exports.deserializeSignedPackage = deserializeSignedPackage;
function recoverSignerPublicKey(object) {
    const digest = object.dataPackage.getSignableHash();
    const publicKeyHex = (0, utils_1.recoverPublicKey)(digest, object.signature);
    return (0, utils_1.arrayify)(publicKeyHex);
}
exports.recoverSignerPublicKey = recoverSignerPublicKey;
function recoverSignerAddress(object) {
    const signerPublicKeyBytes = recoverSignerPublicKey(object);
    return (0, utils_1.computeAddress)(signerPublicKeyBytes);
}
exports.recoverSignerAddress = recoverSignerAddress;
function recoverDeserializedSignerAddress(plainObj) {
    return recoverSignerAddress(deserializeSignedPackage(plainObj));
}
exports.recoverDeserializedSignerAddress = recoverDeserializedSignerAddress;
//# sourceMappingURL=signed-package-deserializing.js.map