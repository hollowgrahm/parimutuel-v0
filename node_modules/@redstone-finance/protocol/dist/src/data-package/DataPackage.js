"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataPackage = void 0;
const utils_1 = require("ethers/lib/utils");
const redstone_constants_1 = require("../common/redstone-constants");
const Serializable_1 = require("../common/Serializable");
const utils_2 = require("../common/utils");
const data_point_deserializer_1 = require("../data-point/data-point-deserializer");
const SignedDataPackage_1 = require("./SignedDataPackage");
class DataPackage extends Serializable_1.Serializable {
    dataPoints;
    timestampMilliseconds;
    dataFeedId;
    constructor(dataPoints, timestampMilliseconds, dataFeedId) {
        super();
        this.dataPoints = dataPoints;
        this.timestampMilliseconds = timestampMilliseconds;
        this.dataFeedId = dataFeedId;
        if (dataPoints.length === 0) {
            throw new Error("Can not create a data package with no data points");
        }
        const expectedDataPointByteSize = dataPoints[0].getValueByteSize();
        for (const dataPoint of dataPoints) {
            (0, utils_2.assert)(dataPoint.getValueByteSize() === expectedDataPointByteSize, "Values of all data points in a DataPackage must have the same number of bytes");
        }
    }
    getEachDataPointByteSize() {
        return this.dataPoints[0].getValueByteSize();
    }
    toBytes() {
        return (0, utils_1.concat)([
            this.serializeDataPoints(),
            this.serializeTimestamp(),
            this.serializeDefaultDataPointByteSize(),
            this.serializeDataPointsCount(),
        ]);
    }
    toObj() {
        return {
            dataPoints: this.dataPoints.map((dataPoint) => dataPoint.toObj()),
            timestampMilliseconds: this.timestampMilliseconds,
            dataFeedId: this.dataFeedId,
        };
    }
    static fromObj(plainObject) {
        const dataPoints = plainObject.dataPoints.map(data_point_deserializer_1.deserializeDataPointFromObj);
        return new DataPackage(dataPoints, plainObject.timestampMilliseconds, plainObject.dataFeedId);
    }
    getSignableHash() {
        const serializedDataPackage = this.toBytes();
        const signableHashHex = (0, utils_1.keccak256)(serializedDataPackage);
        return (0, utils_1.arrayify)(signableHashHex);
    }
    sign(privateKey) {
        const signableHashBytes = this.getSignableHash();
        const signingKey = new utils_1.SigningKey(privateKey);
        const fullSignature = signingKey.signDigest(signableHashBytes);
        return new SignedDataPackage_1.SignedDataPackage(this, fullSignature);
    }
    serializeDataPoints() {
        this.dataPoints.sort((dp1, dp2) => {
            const bytes32dataFeedId1Hexlified = (0, utils_1.hexlify)(dp1.serializeDataFeedId());
            const bytes32dataFeedId2Hexlified = (0, utils_1.hexlify)(dp2.serializeDataFeedId());
            const comparisonResult = bytes32dataFeedId1Hexlified.localeCompare(bytes32dataFeedId2Hexlified);
            (0, utils_2.assert)(comparisonResult !== 0, `Duplicated dataFeedId found: ${dp1.dataFeedId}`);
            return comparisonResult;
        });
        return (0, utils_1.concat)(this.dataPoints.map((dp) => dp.toBytes()));
    }
    serializeTimestamp() {
        return (0, utils_2.convertIntegerNumberToBytes)(this.timestampMilliseconds, redstone_constants_1.TIMESTAMP_BS);
    }
    serializeDataPointsCount() {
        return (0, utils_2.convertIntegerNumberToBytes)(this.dataPoints.length, redstone_constants_1.DATA_POINTS_COUNT_BS);
    }
    serializeDefaultDataPointByteSize() {
        return (0, utils_2.convertIntegerNumberToBytes)(this.getEachDataPointByteSize(), redstone_constants_1.DATA_POINT_VALUE_BYTE_SIZE_BS);
    }
}
exports.DataPackage = DataPackage;
//# sourceMappingURL=DataPackage.js.map