"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SampleRedstoneConsumerBytesMockManyDataFeeds__factory = void 0;
const ethers_1 = require("ethers");
const _abi = [
    {
        inputs: [],
        name: "CalldataMustHaveValidPayload",
        type: "error",
    },
    {
        inputs: [],
        name: "CalldataOverOrUnderFlow",
        type: "error",
    },
    {
        inputs: [],
        name: "DataPackageTimestampMustNotBeZero",
        type: "error",
    },
    {
        inputs: [],
        name: "DataPackageTimestampsMustBeEqual",
        type: "error",
    },
    {
        inputs: [],
        name: "EachSignerMustProvideTheSameValue",
        type: "error",
    },
    {
        inputs: [],
        name: "EmptyCalldataPointersArr",
        type: "error",
    },
    {
        inputs: [],
        name: "GetDataServiceIdNotImplemented",
        type: "error",
    },
    {
        inputs: [],
        name: "IncorrectUnsignedMetadataSize",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "receivedSignersCount",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "requiredSignersCount",
                type: "uint256",
            },
        ],
        name: "InsufficientNumberOfUniqueSigners",
        type: "error",
    },
    {
        inputs: [],
        name: "InvalidCalldataPointer",
        type: "error",
    },
    {
        inputs: [],
        name: "RedstonePayloadMustHaveAtLeastOneDataPackage",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "receivedSigner",
                type: "address",
            },
        ],
        name: "SignerNotAuthorised",
        type: "error",
    },
    {
        inputs: [],
        name: "TimestampIsNotValid",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "uint256[]",
                name: "calldataPointersForValues",
                type: "uint256[]",
            },
        ],
        name: "aggregateByteValues",
        outputs: [
            {
                internalType: "bytes",
                name: "",
                type: "bytes",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256[]",
                name: "calldataPointersToValues",
                type: "uint256[]",
            },
        ],
        name: "aggregateValues",
        outputs: [
            {
                internalType: "uint256",
                name: "pointerToResultBytesInMemory",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "extractTimestampsAndAssertAllAreEqual",
        outputs: [
            {
                internalType: "uint256",
                name: "extractedTimestamp",
                type: "uint256",
            },
        ],
        stateMutability: "pure",
        type: "function",
    },
    {
        inputs: [],
        name: "firstValue",
        outputs: [
            {
                internalType: "bytes",
                name: "",
                type: "bytes",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "signerAddress",
                type: "address",
            },
        ],
        name: "getAllMockAuthorised",
        outputs: [
            {
                internalType: "uint8",
                name: "",
                type: "uint8",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "signerAddress",
                type: "address",
            },
        ],
        name: "getAllMockExceptLastOneAuthorised",
        outputs: [
            {
                internalType: "uint8",
                name: "",
                type: "uint8",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "signerAddress",
                type: "address",
            },
        ],
        name: "getAuthorisedMockSignerIndex",
        outputs: [
            {
                internalType: "uint8",
                name: "",
                type: "uint8",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "signerAddress",
                type: "address",
            },
        ],
        name: "getAuthorisedSignerIndex",
        outputs: [
            {
                internalType: "uint8",
                name: "",
                type: "uint8",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "getDataServiceId",
        outputs: [
            {
                internalType: "string",
                name: "",
                type: "string",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "getUniqueSignersThreshold",
        outputs: [
            {
                internalType: "uint8",
                name: "",
                type: "uint8",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes32[]",
                name: "dataFeedIds",
                type: "bytes32[]",
            },
        ],
        name: "save2ValuesInStorage",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [],
        name: "secondValue",
        outputs: [
            {
                internalType: "bytes",
                name: "",
                type: "bytes",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "receivedTimestampMilliseconds",
                type: "uint256",
            },
        ],
        name: "validateTimestamp",
        outputs: [],
        stateMutability: "view",
        type: "function",
    },
];
const _bytecode = "0x608060405234801561001057600080fd5b50611a47806100206000396000f3fe608060405234801561001057600080fd5b50600436106100df5760003560e01c80637b94ce291161008c578063c274583a11610066578063c274583a146101a6578063d22158fa146101ae578063f50b2efe146101c1578063f90c4924146101d457600080fd5b80637b94ce291461017857806395262d9f14610180578063b24ebfcc1461019357600080fd5b8063429989f0116100bd578063429989f01461013a57806355a547d51461014d5780637a7a28811461016357600080fd5b806313bc58db146100e45780632cfed6111461010d5780633ce142f514610115575b600080fd5b6100f76100f2366004611783565b6101db565b60405161010491906118f2565b60405180910390f35b6100f7610349565b6101286101233660046116df565b6103d7565b60405160ff9091168152602001610104565b6101286101483660046116df565b6103e8565b6101556108c1565b604051908152602001610104565b610176610171366004611713565b610a1b565b005b6100f7610ade565b61012861018e3660046116df565b610aeb565b6101556101a1366004611783565b610af6565b6100f7610b09565b6101286101bc3660046116df565b610b3d565b6101766101cf366004611861565b610bc4565b6003610128565b60606000825111610218576040517f6c2325dc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b36600061024c8460008151811061023f57634e487b7160e01b600052603260045260246000fd5b6020026020010151610c07565b91509150600082826040516102629291906118e2565b604051908190039020905060015b85518110156103085736600061029f88848151811061023f57634e487b7160e01b600052603260045260246000fd5b915091508382826040516102b49291906118e2565b6040518091039020146102f3576040517fece458ec00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50508080610300906119ac565b915050610270565b5082828080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509298975050505050505050565b6001805461035690611971565b80601f016020809104026020016040519081016040528092919081815260200182805461038290611971565b80156103cf5780601f106103a4576101008083540402835291602001916103cf565b820191906000526020600020905b8154815290600101906020018083116103b257829003601f168201915b505050505081565b60006103e282610aeb565b92915050565b600073f39fd6e51aad88f6f4ce6ab8827279cfffb9226673ffffffffffffffffffffffffffffffffffffffff8316141561042457506000919050565b7370997970c51812dc3a010c7d01b50e0d17dc79c873ffffffffffffffffffffffffffffffffffffffff8316141561045e57506001919050565b733c44cdddb6a900fa2b585dd299e03d12fa4293bc73ffffffffffffffffffffffffffffffffffffffff8316141561049857506002919050565b7390f79bf6eb2c4f870365e785982e1f101e93b90673ffffffffffffffffffffffffffffffffffffffff831614156104d257506003919050565b7315d34aaf54267db7d7c367839aaf71a00a2c6a6573ffffffffffffffffffffffffffffffffffffffff8316141561050c57506004919050565b739965507d1a55bcc2695c58ba16fb37d819b0a4dc73ffffffffffffffffffffffffffffffffffffffff8316141561054657506005919050565b73976ea74026e726554db657fa54763abd0c3a0aa973ffffffffffffffffffffffffffffffffffffffff8316141561058057506006919050565b7314dc79964da2c08b23698b3d3cc7ca32193d995573ffffffffffffffffffffffffffffffffffffffff831614156105ba57506007919050565b7323618e81e3f5cdf7f54c3d65f7fbc0abf5b21e8f73ffffffffffffffffffffffffffffffffffffffff831614156105f457506008919050565b73a0ee7a142d267c1f36714e4a8f75612f20a7972073ffffffffffffffffffffffffffffffffffffffff8316141561062e57506009919050565b73bcd4042de499d14e55001ccbb24a551f3b95409673ffffffffffffffffffffffffffffffffffffffff831614156106685750600a919050565b7371be63f3384f5fb98995898a86b02fb2426c578873ffffffffffffffffffffffffffffffffffffffff831614156106a25750600b919050565b73fabb0ac9d68b0b445fb7357272ff202c5651694a73ffffffffffffffffffffffffffffffffffffffff831614156106dc5750600c919050565b731cbd3b2770909d4e10f157cabc84c7264073c9ec73ffffffffffffffffffffffffffffffffffffffff831614156107165750600d919050565b73df3e18d64bc6a983f673ab319ccae4f1a57c709773ffffffffffffffffffffffffffffffffffffffff831614156107505750600e919050565b73cd3b766ccdd6ae721141f452c550ca635964ce7173ffffffffffffffffffffffffffffffffffffffff8316141561078a5750600f919050565b732546bcd3c84621e976d8185a91a922ae77ecec3073ffffffffffffffffffffffffffffffffffffffff831614156107c457506010919050565b73bda5747bfd65f08deb54cb465eb87d40e51b197e73ffffffffffffffffffffffffffffffffffffffff831614156107fe57506011919050565b73dd2fd4581271e230360230f9337d5c0430bf44c073ffffffffffffffffffffffffffffffffffffffff8316141561083857506012919050565b738626f6940e2eb28930efb4cef49b2d1f2c9c119973ffffffffffffffffffffffffffffffffffffffff8316141561087257506013919050565b6040517fec459bc000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff831660048201526024015b60405180910390fd5b6000806108cc610c77565b905060006108d982610da5565b61ffff16905080610916576040517f8552ff3c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610921600283611905565b915060005b81811015610a1557600061093984610df8565b9050600080610949606887611905565b90506000610957823661195a565b80359350905065ffffffffffff831661099c576040517f336dc9d000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b876109b1578265ffffffffffff1697506109f2565b878365ffffffffffff16146109f2576040517fd9d1f46500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6109fc8488611905565b9650505050508080610a0d906119ac565b915050610926565b50505090565b6000610a59838380806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250610e3492505050565b905080600081518110610a7c57634e487b7160e01b600052603260045260246000fd5b602002602001015160009080519060200190610a99929190611646565b5080600181518110610abb57634e487b7160e01b600052603260045260246000fd5b602002602001015160019080519060200190610ad8929190611646565b50505050565b6000805461035690611971565b60006103e282610b3d565b600080610b02836101db565b9392505050565b60606040517f608b530700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000738626f6940e2eb28930efb4cef49b2d1f2c9c119973ffffffffffffffffffffffffffffffffffffffff83161415610bbb576040517fec459bc000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff831660048201526024016108b8565b6103e2826103e8565b6501812f2590c0811015610c04576040517f355b874300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b36600080610c158460801c90565b90506fffffffffffffffffffffffffffffffff841636610c358284611905565b1115610c6d576040517fb0e86e5100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b9094909350915050565b60006602ed57011e00007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe036013581161480610cdf576040517fe7764c9e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60003660291115610d1c576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd736013560006009610d55600362ffffff8516611905565b610d5f9190611905565b905036610d6d600283611905565b1115610b02576040517fc30a7bd700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080610db3602084611905565b905036811115610def576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b36033592915050565b6000806000610e0684610e41565b9092509050604e610e18826020611905565b610e22908461191d565b610e2c9190611905565b949350505050565b60606000610b0283610e98565b600080808080610e52604187611905565b90506000610e6b610e64602084611905565b3690611095565b803594509050610e7c816003611095565b62ffffff9490941697933563ffffffff16965092945050505050565b60606000825167ffffffffffffffff811115610ec457634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610eed578160200160208202803683370190505b5090506000835167ffffffffffffffff811115610f1a57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610f43578160200160208202803683370190505b5090506000845167ffffffffffffffff811115610f7057634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610fa357816020015b6060815260200190600190039081610f8e5790505b50905060005b855181101561100f5760408051600380825260808201909252906020820160608036833701905050828281518110610ff157634e487b7160e01b600052603260045260246000fd5b60200260200101819052508080611007906119ac565b915050610fa9565b50600061101a610c77565b9050600061102782610da5565b61ffff169050611038600283611905565b60405190925060005b8281101561107e5760006110588a898989896110a1565b90506110648186611905565b945082604052508080611076906119ac565b915050611041565b5061108984876113c9565b98975050505050505050565b6000610b02828461195a565b6000806000806110b085610e41565b909250905060008080606081600d6110d36110cc602089611905565b8990611541565b6110dd9190611905565b905060006110ef610e6460688d611905565b9050600061110c8361110260418f611905565b610e649190611905565b9050611118838261112b565b935082602085012094508135965061116d565b604080518381526020818501810190925260009101838382377fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0019392505050565b61117e8765ffffffffffff16610bc4565b6111928561118d60418f611905565b61154d565b955061119d866103d7565b60ff1699505050505050505060008060005b84811015611396576111c28885836115e3565b909350915060005b8c51811015611383578c81815181106111f357634e487b7160e01b600052603260045260246000fd5b60200260200101518414156113715760008b828151811061122457634e487b7160e01b600052603260045260246000fd5b6020026020010151905061123d81896001901b16151590565b1580156112745750600360ff168d838151811061126a57634e487b7160e01b600052603260045260246000fd5b6020026020010151105b1561136b578c828151811061129957634e487b7160e01b600052603260045260246000fd5b6020026020010180518091906112ae906119ac565b81525050838b83815181106112d357634e487b7160e01b600052603260045260246000fd5b602002602001015160018f85815181106112fd57634e487b7160e01b600052603260045260246000fd5b602002602001015161130f919061195a565b8151811061132d57634e487b7160e01b600052603260045260246000fd5b60209081029190910101526001881b81178c838151811061135e57634e487b7160e01b600052603260045260246000fd5b6020026020010181815250505b50611383565b8061137b816119ac565b9150506111ca565b508061138e816119ac565b9150506111af565b505050816020826113a79190611905565b6113b1919061191d565b6113bc90604e611905565b9998505050505050505050565b60606000835167ffffffffffffffff8111156113f557634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561141e578160200160208202803683370190505b509050600360005b8551811015611537578185828151811061145057634e487b7160e01b600052603260045260246000fd5b602002602001015110156114c45784818151811061147e57634e487b7160e01b600052603260045260246000fd5b6020026020010151826040517f2b13aef50000000000000000000000000000000000000000000000000000000081526004016108b8929190918252602082015260400190565b60006114f68783815181106114e957634e487b7160e01b600052603260045260246000fd5b6020026020010151610af6565b90508084838151811061151957634e487b7160e01b600052603260045260246000fd5b6020908102919091010152508061152f816119ac565b915050611426565b5090949350505050565b6000610b02828461191d565b60408051600080825260208083018085528690523685900380850135831a948401859052803560608501819052910135608084018190529193909260019060a0016020604051602081039080840390855afa1580156115b0573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00151979650505050505050565b600080806115f2604e87611905565b90506000611615611604602088611905565b61160f876001611905565b90611541565b61161f9083611905565b9050600061162d3683611095565b803599602090910160801b979097179750505050505050565b82805461165290611971565b90600052602060002090601f01602090048101928261167457600085556116ba565b82601f1061168d57805160ff19168380011785556116ba565b828001600101855582156116ba579182015b828111156116ba57825182559160200191906001019061169f565b506116c69291506116ca565b5090565b5b808211156116c657600081556001016116cb565b6000602082840312156116f0578081fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114610b02578182fd5b60008060208385031215611725578081fd5b823567ffffffffffffffff8082111561173c578283fd5b818501915085601f83011261174f578283fd5b81358181111561175d578384fd5b8660208260051b8501011115611771578384fd5b60209290920196919550909350505050565b60006020808385031215611795578182fd5b823567ffffffffffffffff808211156117ac578384fd5b818501915085601f8301126117bf578384fd5b8135818111156117d1576117d16119fb565b8060051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f83011681018181108582111715611814576118146119fb565b604052828152858101935084860182860187018a1015611832578788fd5b8795505b83861015611854578035855260019590950194938601938601611836565b5098975050505050505050565b600060208284031215611872578081fd5b5035919050565b60008151808452815b8181101561189e57602081850181015186830182015201611882565b818111156118af5782602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b8183823760009101908152919050565b602081526000610b026020830184611879565b60008219821115611918576119186119e5565b500190565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611955576119556119e5565b500290565b60008282101561196c5761196c6119e5565b500390565b600181811c9082168061198557607f821691505b602082108114156119a657634e487b7160e01b600052602260045260246000fd5b50919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156119de576119de6119e5565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220d86c2ff05c5a305e9d79d619d6431365404282e6fd69a2f9f557ac37cc79435f64736f6c63430008040033";
const isSuperArgs = (xs) => xs.length > 1;
class SampleRedstoneConsumerBytesMockManyDataFeeds__factory extends ethers_1.ContractFactory {
    constructor(...args) {
        if (isSuperArgs(args)) {
            super(...args);
        }
        else {
            super(_abi, _bytecode, args[0]);
        }
    }
    deploy(overrides) {
        return super.deploy(overrides || {});
    }
    getDeployTransaction(overrides) {
        return super.getDeployTransaction(overrides || {});
    }
    attach(address) {
        return super.attach(address);
    }
    connect(signer) {
        return super.connect(signer);
    }
    static bytecode = _bytecode;
    static abi = _abi;
    static createInterface() {
        return new ethers_1.utils.Interface(_abi);
    }
    static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
    }
}
exports.SampleRedstoneConsumerBytesMockManyDataFeeds__factory = SampleRedstoneConsumerBytesMockManyDataFeeds__factory;
//# sourceMappingURL=SampleRedstoneConsumerBytesMockManyDataFeeds__factory.js.map