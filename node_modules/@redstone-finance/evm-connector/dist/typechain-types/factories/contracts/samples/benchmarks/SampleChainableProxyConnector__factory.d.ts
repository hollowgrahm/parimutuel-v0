import { Signer, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type { SampleChainableProxyConnector, SampleChainableProxyConnectorInterface } from "../../../../contracts/samples/benchmarks/SampleChainableProxyConnector";
type SampleChainableProxyConnectorConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class SampleChainableProxyConnector__factory extends ContractFactory {
    constructor(...args: SampleChainableProxyConnectorConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<SampleChainableProxyConnector>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): SampleChainableProxyConnector;
    connect(signer: Signer): SampleChainableProxyConnector__factory;
    static readonly bytecode = "0x608060405234801561001057600080fd5b50610ced806100206000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c806355a547d51161005057806355a547d5146100d6578063c6062a68146100f0578063fabdf8361461014557600080fd5b806344b22fdd1461006c5780634db39f23146100c3575b600080fd5b6100c161007a36600461099d565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b005b6100c16100d1366004610aaf565b610158565b6100de61032c565b60405190815260200160405180910390f35b6100c16100fe36600461099d565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6100c16101533660046109d1565b610486565b60015473ffffffffffffffffffffffffffffffffffffffff161561025357604051602481018290526000907f4db39f2300000000000000000000000000000000000000000000000000000000906044015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915260015490915061024e9073ffffffffffffffffffffffffffffffffffffffff168260006104da565b505050565b604051602481018290526000907f4db39f2300000000000000000000000000000000000000000000000000000000906044015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526000805491925061024e9173ffffffffffffffffffffffffffffffffffffffff169083906104da565b60008061033761057b565b90506000610344826106b0565b61ffff16905080610381576040517f8552ff3c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61038c600283610b84565b915060005b818110156104805760006103a484610703565b90506000806103b4606887610b84565b905060006103c28236610bd9565b80359350905065ffffffffffff8316610407576040517f336dc9d000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8761041c578265ffffffffffff16975061045d565b878365ffffffffffff161461045d576040517fd9d1f46500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6104678488610b84565b965050505050808061047890610c20565b915050610391565b50505090565b60015473ffffffffffffffffffffffffffffffffffffffff16156104bf57600063fabdf83660e01b826040516024016101a99190610b2d565b600063fabdf83660e01b826040516024016102869190610b2d565b606060006104e78461073f565b90506000808673ffffffffffffffffffffffffffffffffffffffff168561050f576000610511565b345b8460405161051f9190610b11565b60006040518083038185875af1925050503d806000811461055c576040519150601f19603f3d011682016040523d82523d6000602084013e610561565b606091505b509150915061057082826107e7565b979650505050505050565b60006602ed57011e00007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0360135811614806105e3576040517fe7764c9e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60003660291115610620576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd736013560006009610659600362ffffff8516610b84565b6106639190610b84565b905036610671600283610b84565b11156106a9576040517fc30a7bd700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b9392505050565b6000806106be602084610b84565b9050368111156106fa576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b36033592915050565b6000806000610711846108cf565b9092509050604e610723826020610b84565b61072d9084610b9c565b6107379190610b84565b949350505050565b8051606090600061074e610926565b9050600061075c8284610b84565b905036821115610798576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6060604051905081815285602001848101826020015b818310156107c65782518152602092830192016107ae565b50505082833603856020018301379190920181016020016040529392505050565b6060826108c9578151610826576040517f567fe27a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60208201517f08c379a000000000000000000000000000000000000000000000000000000000148015610895576040517f0f7e8278000000000000000000000000000000000000000000000000000000008152604484019061088c908290600401610b71565b60405180910390fd5b826040517ffd36fde300000000000000000000000000000000000000000000000000000000815260040161088c9190610b71565b50919050565b6000808080806108e0604187610b84565b905060006108f96108f2602084610b84565b3690610991565b80359450905061090a816003610991565b62ffffff9490941697933563ffffffff16965092945050505050565b60008061093161057b565b9050600061093e826106b0565b61ffff16905061094f600283610b84565b915060005b8181101561098957600061096784610703565b90506109738185610b84565b935050808061098190610c20565b915050610954565b509092915050565b60006106a98284610bd9565b6000602082840312156109ae578081fd5b813573ffffffffffffffffffffffffffffffffffffffff811681146106a9578182fd5b600060208083850312156109e3578182fd5b823567ffffffffffffffff808211156109fa578384fd5b818501915085601f830112610a0d578384fd5b813581811115610a1f57610a1f610c88565b8060051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f83011681018181108582111715610a6257610a62610c88565b604052828152858101935084860182860187018a1015610a80578788fd5b8795505b83861015610aa2578035855260019590950194938601938601610a84565b5098975050505050505050565b600060208284031215610ac0578081fd5b5035919050565b60008151808452610adf816020860160208601610bf0565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60008251610b23818460208701610bf0565b9190910192915050565b6020808252825182820181905260009190848201906040850190845b81811015610b6557835183529284019291840191600101610b49565b50909695505050505050565b6020815260006106a96020830184610ac7565b60008219821115610b9757610b97610c59565b500190565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610bd457610bd4610c59565b500290565b600082821015610beb57610beb610c59565b500390565b60005b83811015610c0b578181015183820152602001610bf3565b83811115610c1a576000848401525b50505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610c5257610c52610c59565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfea2646970667358221220ddccfa2370ecba870cc5d156d4d18fff9cde3d0e9ed7883b2dbb0b940ae43b8064736f6c63430008040033";
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "CalldataMustHaveValidPayload";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "CalldataOverOrUnderFlow";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "DataPackageTimestampMustNotBeZero";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "DataPackageTimestampsMustBeEqual";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "EachSignerMustProvideTheSameValue";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "EmptyCalldataPointersArr";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "IncorrectUnsignedMetadataSize";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "receivedSignersCount";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "requiredSignersCount";
            readonly type: "uint256";
        }];
        readonly name: "InsufficientNumberOfUniqueSigners";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidCalldataPointer";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "result";
            readonly type: "bytes";
        }];
        readonly name: "ProxyCalldataFailedWithCustomError";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "message";
            readonly type: "string";
        }];
        readonly name: "ProxyCalldataFailedWithStringMessage";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "ProxyCalldataFailedWithoutErrMsg";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "RedstonePayloadMustHaveAtLeastOneDataPackage";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "receivedSigner";
            readonly type: "address";
        }];
        readonly name: "SignerNotAuthorised";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "extractTimestampsAndAssertAllAreEqual";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "extractedTimestamp";
            readonly type: "uint256";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "dataFeedId";
            readonly type: "bytes32";
        }];
        readonly name: "processOracleValue";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32[]";
            readonly name: "dataFeedIds";
            readonly type: "bytes32[]";
        }];
        readonly name: "processOracleValues";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_sampleProxyConnectorConsumer";
            readonly type: "address";
        }];
        readonly name: "registerConsumer";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_sampleProxyConnector";
            readonly type: "address";
        }];
        readonly name: "registerNextConnector";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): SampleChainableProxyConnectorInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): SampleChainableProxyConnector;
}
export {};
//# sourceMappingURL=SampleChainableProxyConnector__factory.d.ts.map