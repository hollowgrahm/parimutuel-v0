import { Signer, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type { SampleWithEvents, SampleWithEventsInterface } from "../../../contracts/samples/SampleWithEvents";
type SampleWithEventsConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class SampleWithEvents__factory extends ContractFactory {
    constructor(...args: SampleWithEventsConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<SampleWithEvents>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): SampleWithEvents;
    connect(signer: Signer): SampleWithEvents__factory;
    static readonly bytecode = "0x608060405234801561001057600080fd5b506117e8806100206000396000f3fe608060405234801561001057600080fd5b50600436106100be5760003560e01c8063b24ebfcc11610076578063d22158fa1161005b578063d22158fa1461015b578063f50b2efe1461016e578063f90c49241461018157600080fd5b8063b24ebfcc14610133578063c274583a1461014657600080fd5b806355a547d5116100a757806355a547d514610100578063769b56051461011657806395262d9f1461012057600080fd5b80633ce142f5146100c3578063429989f0146100ed575b600080fd5b6100d66100d1366004611508565b610188565b60405160ff90911681526020015b60405180910390f35b6100d66100fb366004611508565b610199565b610108610672565b6040519081526020016100e4565b61011e6107cc565b005b6100d661012e366004611508565b610835565b61010861014136600461153c565b610840565b61014e61084b565b6040516100e49190611632565b6100d6610169366004611508565b61087f565b61011e61017c36600461161a565b610906565b600a6100d6565b600061019382610835565b92915050565b600073f39fd6e51aad88f6f4ce6ab8827279cfffb9226673ffffffffffffffffffffffffffffffffffffffff831614156101d557506000919050565b7370997970c51812dc3a010c7d01b50e0d17dc79c873ffffffffffffffffffffffffffffffffffffffff8316141561020f57506001919050565b733c44cdddb6a900fa2b585dd299e03d12fa4293bc73ffffffffffffffffffffffffffffffffffffffff8316141561024957506002919050565b7390f79bf6eb2c4f870365e785982e1f101e93b90673ffffffffffffffffffffffffffffffffffffffff8316141561028357506003919050565b7315d34aaf54267db7d7c367839aaf71a00a2c6a6573ffffffffffffffffffffffffffffffffffffffff831614156102bd57506004919050565b739965507d1a55bcc2695c58ba16fb37d819b0a4dc73ffffffffffffffffffffffffffffffffffffffff831614156102f757506005919050565b73976ea74026e726554db657fa54763abd0c3a0aa973ffffffffffffffffffffffffffffffffffffffff8316141561033157506006919050565b7314dc79964da2c08b23698b3d3cc7ca32193d995573ffffffffffffffffffffffffffffffffffffffff8316141561036b57506007919050565b7323618e81e3f5cdf7f54c3d65f7fbc0abf5b21e8f73ffffffffffffffffffffffffffffffffffffffff831614156103a557506008919050565b73a0ee7a142d267c1f36714e4a8f75612f20a7972073ffffffffffffffffffffffffffffffffffffffff831614156103df57506009919050565b73bcd4042de499d14e55001ccbb24a551f3b95409673ffffffffffffffffffffffffffffffffffffffff831614156104195750600a919050565b7371be63f3384f5fb98995898a86b02fb2426c578873ffffffffffffffffffffffffffffffffffffffff831614156104535750600b919050565b73fabb0ac9d68b0b445fb7357272ff202c5651694a73ffffffffffffffffffffffffffffffffffffffff8316141561048d5750600c919050565b731cbd3b2770909d4e10f157cabc84c7264073c9ec73ffffffffffffffffffffffffffffffffffffffff831614156104c75750600d919050565b73df3e18d64bc6a983f673ab319ccae4f1a57c709773ffffffffffffffffffffffffffffffffffffffff831614156105015750600e919050565b73cd3b766ccdd6ae721141f452c550ca635964ce7173ffffffffffffffffffffffffffffffffffffffff8316141561053b5750600f919050565b732546bcd3c84621e976d8185a91a922ae77ecec3073ffffffffffffffffffffffffffffffffffffffff8316141561057557506010919050565b73bda5747bfd65f08deb54cb465eb87d40e51b197e73ffffffffffffffffffffffffffffffffffffffff831614156105af57506011919050565b73dd2fd4581271e230360230f9337d5c0430bf44c073ffffffffffffffffffffffffffffffffffffffff831614156105e957506012919050565b738626f6940e2eb28930efb4cef49b2d1f2c9c119973ffffffffffffffffffffffffffffffffffffffff8316141561062357506013919050565b6040517fec459bc000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff831660048201526024015b60405180910390fd5b60008061067d610949565b9050600061068a82610a7e565b61ffff169050806106c7576040517f8552ff3c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6106d26002836116a3565b915060005b818110156107c65760006106ea84610ad1565b90506000806106fa6068876116a3565b90506000610708823661170c565b80359350905065ffffffffffff831661074d576040517f336dc9d000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b87610762578265ffffffffffff1697506107a3565b878365ffffffffffff16146107a3576040517fd9d1f46500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6107ad84886116a3565b96505050505080806107be90611723565b9150506106d7565b50505090565b60006107f77f4554480000000000000000000000000000000000000000000000000000000000610b0d565b90507f4273d0736f60e0dedfe745e86718093d8ec8646ebd2a60cd60643eeced5658118160405161082a91815260200190565b60405180910390a150565b60006101938261087f565b600061019382610b99565b60606040517f608b530700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000738626f6940e2eb28930efb4cef49b2d1f2c9c119973ffffffffffffffffffffffffffffffffffffffff831614156108fd576040517fec459bc000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83166004820152602401610669565b61019382610199565b6501812f2590c0811015610946576040517f355b874300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b60006602ed57011e00007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0360135811614806109b1576040517fe7764c9e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600036602911156109ee576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd736013560006009610a27600362ffffff85166116a3565b610a3191906116a3565b905036610a3f6002836116a3565b1115610a77576040517fc30a7bd700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b9392505050565b600080610a8c6020846116a3565b905036811115610ac8576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b36033592915050565b6000806000610adf84610ba4565b9092509050604e610af18260206116a3565b610afb90846116cf565b610b0591906116a3565b949350505050565b604080516001808252818301909252600091829190602080830190803683370190505090508281600081518110610b5457634e487b7160e01b600052603260045260246000fd5b602002602001018181525050610b6981610bfb565b600081518110610b8957634e487b7160e01b600052603260045260246000fd5b6020026020010151915050919050565b600061019382610c06565b600080808080610bb56041876116a3565b90506000610bce610bc76020846116a3565b3690610d02565b803594509050610bdf816003610d02565b62ffffff9490941697933563ffffffff16965092945050505050565b606061019382610d0e565b6000815160001415610c44576040517f9e198af900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610c4d82610f0d565b600060028351610c5d91906116bb565b905060028351610c6d919061175c565b610ce2576000610cd584610c8260018561170c565b81518110610ca057634e487b7160e01b600052603260045260246000fd5b6020026020010151858481518110610cc857634e487b7160e01b600052603260045260246000fd5b6020026020010151610f5b565b9050610b056002826116bb565b828181518110610b8957634e487b7160e01b600052603260045260246000fd5b6000610a77828461170c565b60606000825167ffffffffffffffff811115610d3a57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610d63578160200160208202803683370190505b5090506000835167ffffffffffffffff811115610d9057634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610db9578160200160208202803683370190505b5090506000845167ffffffffffffffff811115610de657634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610e1957816020015b6060815260200190600190039081610e045790505b50905060005b8551811015610e875760408051600a808252610160820190925290602082016101408036833701905050828281518110610e6957634e487b7160e01b600052603260045260246000fd5b60200260200101819052508080610e7f90611723565b915050610e1f565b506000610e92610949565b90506000610e9f82610a7e565b61ffff169050610eb06002836116a3565b60405190925060005b82811015610ef6576000610ed08a89898989610f67565b9050610edc81866116a3565b945082604052508080610eee90611723565b915050610eb9565b50610f01848761128f565b98975050505050505050565b8051602082016020820281019150805b82811015610f5557815b81811015610f4c578151815180821015610f42578084528183525b5050602001610f27565b50602001610f1d565b50505050565b6000610a7782846116a3565b600080600080610f7685610ba4565b909250905060008080606081600d610f99610f926020896116a3565b8990611407565b610fa391906116a3565b90506000610fb5610bc760688d6116a3565b90506000610fd283610fc860418f6116a3565b610bc791906116a3565b9050610fde8382610ff1565b9350826020850120945081359650611033565b604080518381526020818501810190925260009101838382377fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0019392505050565b6110448765ffffffffffff16610906565b6110588561105360418f6116a3565b611413565b955061106386610188565b60ff1699505050505050505060008060005b8481101561125c576110888885836114a9565b909350915060005b8c51811015611249578c81815181106110b957634e487b7160e01b600052603260045260246000fd5b60200260200101518414156112375760008b82815181106110ea57634e487b7160e01b600052603260045260246000fd5b6020026020010151905061110381896001901b16151590565b15801561113a5750600a60ff168d838151811061113057634e487b7160e01b600052603260045260246000fd5b6020026020010151105b15611231578c828151811061115f57634e487b7160e01b600052603260045260246000fd5b60200260200101805180919061117490611723565b81525050838b838151811061119957634e487b7160e01b600052603260045260246000fd5b602002602001015160018f85815181106111c357634e487b7160e01b600052603260045260246000fd5b60200260200101516111d5919061170c565b815181106111f357634e487b7160e01b600052603260045260246000fd5b60209081029190910101526001881b81178c838151811061122457634e487b7160e01b600052603260045260246000fd5b6020026020010181815250505b50611249565b8061124181611723565b915050611090565b508061125481611723565b915050611075565b5050508160208261126d91906116a3565b61127791906116cf565b61128290604e6116a3565b9998505050505050505050565b60606000835167ffffffffffffffff8111156112bb57634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156112e4578160200160208202803683370190505b509050600a60005b85518110156113fd578185828151811061131657634e487b7160e01b600052603260045260246000fd5b6020026020010151101561138a5784818151811061134457634e487b7160e01b600052603260045260246000fd5b6020026020010151826040517f2b13aef5000000000000000000000000000000000000000000000000000000008152600401610669929190918252602082015260400190565b60006113bc8783815181106113af57634e487b7160e01b600052603260045260246000fd5b6020026020010151610840565b9050808483815181106113df57634e487b7160e01b600052603260045260246000fd5b602090810291909101015250806113f581611723565b9150506112ec565b5090949350505050565b6000610a7782846116cf565b60408051600080825260208083018085528690523685900380850135831a948401859052803560608501819052910135608084018190529193909260019060a0016020604051602081039080840390855afa158015611476573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00151979650505050505050565b600080806114b8604e876116a3565b905060006114e56114de6114cd6020896116a3565b6114d88860016116a3565b90611407565b8390610f5b565b905060006114f33683610d02565b80359960209091013598509650505050505050565b600060208284031215611519578081fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114610a77578182fd5b6000602080838503121561154e578182fd5b823567ffffffffffffffff80821115611565578384fd5b818501915085601f830112611578578384fd5b81358181111561158a5761158a61179c565b8060051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f830116810181811085821117156115cd576115cd61179c565b604052828152858101935084860182860187018a10156115eb578788fd5b8795505b8386101561160d5780358552600195909501949386019386016115ef565b5098975050505050505050565b60006020828403121561162b578081fd5b5035919050565b6000602080835283518082850152825b8181101561165e57858101830151858201604001528201611642565b8181111561166f5783604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b600082198211156116b6576116b6611770565b500190565b6000826116ca576116ca611786565b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561170757611707611770565b500290565b60008282101561171e5761171e611770565b500390565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561175557611755611770565b5060010190565b60008261176b5761176b611786565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220b7ee041dc3c43827724e30a566b2487665b2d2fec949119bdd38d2dd23311ec464736f6c63430008040033";
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "CalldataMustHaveValidPayload";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "CalldataOverOrUnderFlow";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "CanNotPickMedianOfEmptyArray";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "DataPackageTimestampMustNotBeZero";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "DataPackageTimestampsMustBeEqual";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "EachSignerMustProvideTheSameValue";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "EmptyCalldataPointersArr";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "GetDataServiceIdNotImplemented";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "IncorrectUnsignedMetadataSize";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "receivedSignersCount";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "requiredSignersCount";
            readonly type: "uint256";
        }];
        readonly name: "InsufficientNumberOfUniqueSigners";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidCalldataPointer";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "RedstonePayloadMustHaveAtLeastOneDataPackage";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "receivedSigner";
            readonly type: "address";
        }];
        readonly name: "SignerNotAuthorised";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "TimestampIsNotValid";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "_updatedValue";
            readonly type: "uint256";
        }];
        readonly name: "ValueUpdated";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256[]";
            readonly name: "values";
            readonly type: "uint256[]";
        }];
        readonly name: "aggregateValues";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "emitEventWithLatestOracleValue";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "extractTimestampsAndAssertAllAreEqual";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "extractedTimestamp";
            readonly type: "uint256";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "signerAddress";
            readonly type: "address";
        }];
        readonly name: "getAllMockAuthorised";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "signerAddress";
            readonly type: "address";
        }];
        readonly name: "getAllMockExceptLastOneAuthorised";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "signerAddress";
            readonly type: "address";
        }];
        readonly name: "getAuthorisedMockSignerIndex";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "signerAddress";
            readonly type: "address";
        }];
        readonly name: "getAuthorisedSignerIndex";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getDataServiceId";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getUniqueSignersThreshold";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "receivedTimestampMilliseconds";
            readonly type: "uint256";
        }];
        readonly name: "validateTimestamp";
        readonly outputs: readonly [];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): SampleWithEventsInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): SampleWithEvents;
}
export {};
//# sourceMappingURL=SampleWithEvents__factory.d.ts.map