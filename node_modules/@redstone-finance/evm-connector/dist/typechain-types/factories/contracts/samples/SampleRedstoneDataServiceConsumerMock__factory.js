"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SampleRedstoneDataServiceConsumerMock__factory = void 0;
const ethers_1 = require("ethers");
const _abi = [
    {
        inputs: [],
        name: "CalldataMustHaveValidPayload",
        type: "error",
    },
    {
        inputs: [],
        name: "CalldataOverOrUnderFlow",
        type: "error",
    },
    {
        inputs: [],
        name: "CanNotPickMedianOfEmptyArray",
        type: "error",
    },
    {
        inputs: [],
        name: "DataPackageTimestampMustNotBeZero",
        type: "error",
    },
    {
        inputs: [],
        name: "DataPackageTimestampsMustBeEqual",
        type: "error",
    },
    {
        inputs: [],
        name: "EachSignerMustProvideTheSameValue",
        type: "error",
    },
    {
        inputs: [],
        name: "EmptyCalldataPointersArr",
        type: "error",
    },
    {
        inputs: [],
        name: "GetDataServiceIdNotImplemented",
        type: "error",
    },
    {
        inputs: [],
        name: "IncorrectUnsignedMetadataSize",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "receivedSignersCount",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "requiredSignersCount",
                type: "uint256",
            },
        ],
        name: "InsufficientNumberOfUniqueSigners",
        type: "error",
    },
    {
        inputs: [],
        name: "InvalidCalldataPointer",
        type: "error",
    },
    {
        inputs: [],
        name: "RedstonePayloadMustHaveAtLeastOneDataPackage",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "receivedSigner",
                type: "address",
            },
        ],
        name: "SignerNotAuthorised",
        type: "error",
    },
    {
        inputs: [],
        name: "TimestampIsNotValid",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "uint256[]",
                name: "values",
                type: "uint256[]",
            },
        ],
        name: "aggregateValues",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "extractTimestampsAndAssertAllAreEqual",
        outputs: [
            {
                internalType: "uint256",
                name: "extractedTimestamp",
                type: "uint256",
            },
        ],
        stateMutability: "pure",
        type: "function",
    },
    {
        inputs: [],
        name: "firstValue",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "signerAddress",
                type: "address",
            },
        ],
        name: "getAllMockAuthorised",
        outputs: [
            {
                internalType: "uint8",
                name: "",
                type: "uint8",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "signerAddress",
                type: "address",
            },
        ],
        name: "getAllMockExceptLastOneAuthorised",
        outputs: [
            {
                internalType: "uint8",
                name: "",
                type: "uint8",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "signerAddress",
                type: "address",
            },
        ],
        name: "getAuthorisedMockSignerIndex",
        outputs: [
            {
                internalType: "uint8",
                name: "",
                type: "uint8",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "signerAddress",
                type: "address",
            },
        ],
        name: "getAuthorisedSignerIndex",
        outputs: [
            {
                internalType: "uint8",
                name: "",
                type: "uint8",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "getDataServiceId",
        outputs: [
            {
                internalType: "string",
                name: "",
                type: "string",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "getUniqueSignersThreshold",
        outputs: [
            {
                internalType: "uint8",
                name: "",
                type: "uint8",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes32[]",
                name: "dataFeedIds",
                type: "bytes32[]",
            },
        ],
        name: "save2ValuesInStorage",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes32[]",
                name: "dataFeedIds",
                type: "bytes32[]",
            },
            {
                internalType: "bytes",
                name: "",
                type: "bytes",
            },
        ],
        name: "save2ValuesInStorageWithManualPayload",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [],
        name: "secondValue",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "receivedTimestampMilliseconds",
                type: "uint256",
            },
        ],
        name: "validateTimestamp",
        outputs: [],
        stateMutability: "view",
        type: "function",
    },
];
const _bytecode = "0x608060405234801561001057600080fd5b50611912806100206000396000f3fe608060405234801561001057600080fd5b50600436106100df5760003560e01c806395262d9f1161008c578063d22158fa11610066578063d22158fa146101c3578063f4afad24146101d6578063f50b2efe146101e9578063f90c4924146101fc57600080fd5b806395262d9f1461015e578063b24ebfcc14610171578063c274583a1461018457600080fd5b806355a547d5116100bd57806355a547d5146101385780637a7a2881146101405780637b94ce291461015557600080fd5b80632cfed611146100e45780633ce142f514610100578063429989f014610125575b600080fd5b6100ed60015481565b6040519081526020015b60405180910390f35b61011361010e366004611561565b610203565b60405160ff90911681526020016100f7565b610113610133366004611561565b610214565b6100ed6106ed565b61015361014e366004611595565b610847565b005b6100ed60005481565b61011361016c366004611561565b6108ea565b6100ed61017f366004611666565b6108f5565b604080518082018252601781527f6d6f636b2d646174612d736572766963652d7465737473000000000000000000602082015290516100f7919061175c565b6101136101d1366004611561565b610900565b6101536101e43660046115d5565b610987565b6101536101f7366004611744565b610997565b600a610113565b600061020e826108ea565b92915050565b600073f39fd6e51aad88f6f4ce6ab8827279cfffb9226673ffffffffffffffffffffffffffffffffffffffff8316141561025057506000919050565b7370997970c51812dc3a010c7d01b50e0d17dc79c873ffffffffffffffffffffffffffffffffffffffff8316141561028a57506001919050565b733c44cdddb6a900fa2b585dd299e03d12fa4293bc73ffffffffffffffffffffffffffffffffffffffff831614156102c457506002919050565b7390f79bf6eb2c4f870365e785982e1f101e93b90673ffffffffffffffffffffffffffffffffffffffff831614156102fe57506003919050565b7315d34aaf54267db7d7c367839aaf71a00a2c6a6573ffffffffffffffffffffffffffffffffffffffff8316141561033857506004919050565b739965507d1a55bcc2695c58ba16fb37d819b0a4dc73ffffffffffffffffffffffffffffffffffffffff8316141561037257506005919050565b73976ea74026e726554db657fa54763abd0c3a0aa973ffffffffffffffffffffffffffffffffffffffff831614156103ac57506006919050565b7314dc79964da2c08b23698b3d3cc7ca32193d995573ffffffffffffffffffffffffffffffffffffffff831614156103e657506007919050565b7323618e81e3f5cdf7f54c3d65f7fbc0abf5b21e8f73ffffffffffffffffffffffffffffffffffffffff8316141561042057506008919050565b73a0ee7a142d267c1f36714e4a8f75612f20a7972073ffffffffffffffffffffffffffffffffffffffff8316141561045a57506009919050565b73bcd4042de499d14e55001ccbb24a551f3b95409673ffffffffffffffffffffffffffffffffffffffff831614156104945750600a919050565b7371be63f3384f5fb98995898a86b02fb2426c578873ffffffffffffffffffffffffffffffffffffffff831614156104ce5750600b919050565b73fabb0ac9d68b0b445fb7357272ff202c5651694a73ffffffffffffffffffffffffffffffffffffffff831614156105085750600c919050565b731cbd3b2770909d4e10f157cabc84c7264073c9ec73ffffffffffffffffffffffffffffffffffffffff831614156105425750600d919050565b73df3e18d64bc6a983f673ab319ccae4f1a57c709773ffffffffffffffffffffffffffffffffffffffff8316141561057c5750600e919050565b73cd3b766ccdd6ae721141f452c550ca635964ce7173ffffffffffffffffffffffffffffffffffffffff831614156105b65750600f919050565b732546bcd3c84621e976d8185a91a922ae77ecec3073ffffffffffffffffffffffffffffffffffffffff831614156105f057506010919050565b73bda5747bfd65f08deb54cb465eb87d40e51b197e73ffffffffffffffffffffffffffffffffffffffff8316141561062a57506011919050565b73dd2fd4581271e230360230f9337d5c0430bf44c073ffffffffffffffffffffffffffffffffffffffff8316141561066457506012919050565b738626f6940e2eb28930efb4cef49b2d1f2c9c119973ffffffffffffffffffffffffffffffffffffffff8316141561069e57506013919050565b6040517fec459bc000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff831660048201526024015b60405180910390fd5b6000806106f86109da565b9050600061070582610b0f565b61ffff16905080610742576040517f8552ff3c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61074d6002836117cd565b915060005b8181101561084157600061076584610b62565b90506000806107756068876117cd565b905060006107838236611836565b80359350905065ffffffffffff83166107c8576040517f336dc9d000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b876107dd578265ffffffffffff16975061081e565b878365ffffffffffff161461081e576040517fd9d1f46500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61082884886117cd565b96505050505080806108399061184d565b915050610752565b50505090565b6000610885838380806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250610b9e92505050565b9050806000815181106108a857634e487b7160e01b600052603260045260246000fd5b6020026020010151600081905550806001815181106108d757634e487b7160e01b600052603260045260246000fd5b6020026020010151600181905550505050565b600061020e82610900565b600061020e82610ba9565b6000738626f6940e2eb28930efb4cef49b2d1f2c9c119973ffffffffffffffffffffffffffffffffffffffff8316141561097e576040517fec459bc000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff831660048201526024016106e4565b61020e82610214565b6109918484610847565b50505050565b6501812f2590c08110156109d7576040517f355b874300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b60006602ed57011e00007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe036013581161480610a42576040517fe7764c9e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60003660291115610a7f576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd736013560006009610ab8600362ffffff85166117cd565b610ac291906117cd565b905036610ad06002836117cd565b1115610b08576040517fc30a7bd700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b9392505050565b600080610b1d6020846117cd565b905036811115610b59576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b36033592915050565b6000806000610b7084610bb4565b9092509050604e610b828260206117cd565b610b8c90846117f9565b610b9691906117cd565b949350505050565b606061020e82610c0b565b600061020e82610e0a565b600080808080610bc56041876117cd565b90506000610bde610bd76020846117cd565b3690610f16565b803594509050610bef816003610f16565b62ffffff9490941697933563ffffffff16965092945050505050565b60606000825167ffffffffffffffff811115610c3757634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610c60578160200160208202803683370190505b5090506000835167ffffffffffffffff811115610c8d57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610cb6578160200160208202803683370190505b5090506000845167ffffffffffffffff811115610ce357634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610d1657816020015b6060815260200190600190039081610d015790505b50905060005b8551811015610d845760408051600a808252610160820190925290602082016101408036833701905050828281518110610d6657634e487b7160e01b600052603260045260246000fd5b60200260200101819052508080610d7c9061184d565b915050610d1c565b506000610d8f6109da565b90506000610d9c82610b0f565b61ffff169050610dad6002836117cd565b60405190925060005b82811015610df3576000610dcd8a89898989610f22565b9050610dd981866117cd565b945082604052508080610deb9061184d565b915050610db6565b50610dfe848761124a565b98975050505050505050565b6000815160001415610e48576040517f9e198af900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610e51826113c2565b600060028351610e6191906117e5565b905060028351610e719190611886565b610ee6576000610ed984610e86600185611836565b81518110610ea457634e487b7160e01b600052603260045260246000fd5b6020026020010151858481518110610ecc57634e487b7160e01b600052603260045260246000fd5b602002602001015161140a565b9050610b966002826117e5565b828181518110610f0657634e487b7160e01b600052603260045260246000fd5b6020026020010151915050919050565b6000610b088284611836565b600080600080610f3185610bb4565b909250905060008080606081600d610f54610f4d6020896117cd565b8990611416565b610f5e91906117cd565b90506000610f70610bd760688d6117cd565b90506000610f8d83610f8360418f6117cd565b610bd791906117cd565b9050610f998382610fac565b9350826020850120945081359650610fee565b604080518381526020818501810190925260009101838382377fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0019392505050565b610fff8765ffffffffffff16610997565b6110138561100e60418f6117cd565b611422565b955061101e86610203565b60ff1699505050505050505060008060005b84811015611217576110438885836114b8565b909350915060005b8c51811015611204578c818151811061107457634e487b7160e01b600052603260045260246000fd5b60200260200101518414156111f25760008b82815181106110a557634e487b7160e01b600052603260045260246000fd5b602002602001015190506110be81896001901b16151590565b1580156110f55750600a60ff168d83815181106110eb57634e487b7160e01b600052603260045260246000fd5b6020026020010151105b156111ec578c828151811061111a57634e487b7160e01b600052603260045260246000fd5b60200260200101805180919061112f9061184d565b81525050838b838151811061115457634e487b7160e01b600052603260045260246000fd5b602002602001015160018f858151811061117e57634e487b7160e01b600052603260045260246000fd5b60200260200101516111909190611836565b815181106111ae57634e487b7160e01b600052603260045260246000fd5b60209081029190910101526001881b81178c83815181106111df57634e487b7160e01b600052603260045260246000fd5b6020026020010181815250505b50611204565b806111fc8161184d565b91505061104b565b508061120f8161184d565b915050611030565b5050508160208261122891906117cd565b61123291906117f9565b61123d90604e6117cd565b9998505050505050505050565b60606000835167ffffffffffffffff81111561127657634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561129f578160200160208202803683370190505b509050600a60005b85518110156113b857818582815181106112d157634e487b7160e01b600052603260045260246000fd5b60200260200101511015611345578481815181106112ff57634e487b7160e01b600052603260045260246000fd5b6020026020010151826040517f2b13aef50000000000000000000000000000000000000000000000000000000081526004016106e4929190918252602082015260400190565b600061137787838151811061136a57634e487b7160e01b600052603260045260246000fd5b60200260200101516108f5565b90508084838151811061139a57634e487b7160e01b600052603260045260246000fd5b602090810291909101015250806113b08161184d565b9150506112a7565b5090949350505050565b8051602082016020820281019150805b8281101561099157815b818110156114015781518151808210156113f7578084528183525b50506020016113dc565b506020016113d2565b6000610b0882846117cd565b6000610b0882846117f9565b60408051600080825260208083018085528690523685900380850135831a948401859052803560608501819052910135608084018190529193909260019060a0016020604051602081039080840390855afa158015611485573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00151979650505050505050565b600080806114c7604e876117cd565b905060006114f46114ed6114dc6020896117cd565b6114e78860016117cd565b90611416565b839061140a565b905060006115023683610f16565b80359960209091013598509650505050505050565b60008083601f840112611528578081fd5b50813567ffffffffffffffff81111561153f578182fd5b6020830191508360208260051b850101111561155a57600080fd5b9250929050565b600060208284031215611572578081fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114610b08578182fd5b600080602083850312156115a7578081fd5b823567ffffffffffffffff8111156115bd578182fd5b6115c985828601611517565b90969095509350505050565b600080600080604085870312156115ea578182fd5b843567ffffffffffffffff80821115611601578384fd5b61160d88838901611517565b90965094506020870135915080821115611625578384fd5b818701915087601f830112611638578384fd5b813581811115611646578485fd5b886020828501011115611657578485fd5b95989497505060200194505050565b60006020808385031215611678578182fd5b823567ffffffffffffffff8082111561168f578384fd5b818501915085601f8301126116a2578384fd5b8135818111156116b4576116b46118c6565b8060051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f830116810181811085821117156116f7576116f76118c6565b604052828152858101935084860182860187018a1015611715578788fd5b8795505b83861015611737578035855260019590950194938601938601611719565b5098975050505050505050565b600060208284031215611755578081fd5b5035919050565b6000602080835283518082850152825b818110156117885785810183015185820160400152820161176c565b818111156117995783604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b600082198211156117e0576117e061189a565b500190565b6000826117f4576117f46118b0565b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156118315761183161189a565b500290565b6000828210156118485761184861189a565b500390565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561187f5761187f61189a565b5060010190565b600082611895576118956118b0565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea264697066735822122010dfe10c45e9972b79a582cd989c71106a2244f5e07263d798d87fc99fc3af4864736f6c63430008040033";
const isSuperArgs = (xs) => xs.length > 1;
class SampleRedstoneDataServiceConsumerMock__factory extends ethers_1.ContractFactory {
    constructor(...args) {
        if (isSuperArgs(args)) {
            super(...args);
        }
        else {
            super(_abi, _bytecode, args[0]);
        }
    }
    deploy(overrides) {
        return super.deploy(overrides || {});
    }
    getDeployTransaction(overrides) {
        return super.getDeployTransaction(overrides || {});
    }
    attach(address) {
        return super.attach(address);
    }
    connect(signer) {
        return super.connect(signer);
    }
    static bytecode = _bytecode;
    static abi = _abi;
    static createInterface() {
        return new ethers_1.utils.Interface(_abi);
    }
    static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
    }
}
exports.SampleRedstoneDataServiceConsumerMock__factory = SampleRedstoneDataServiceConsumerMock__factory;
//# sourceMappingURL=SampleRedstoneDataServiceConsumerMock__factory.js.map