import { Signer, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type { SampleRedstoneConsumerBytesMock, SampleRedstoneConsumerBytesMockInterface } from "../../../contracts/samples/SampleRedstoneConsumerBytesMock";
type SampleRedstoneConsumerBytesMockConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class SampleRedstoneConsumerBytesMock__factory extends ContractFactory {
    constructor(...args: SampleRedstoneConsumerBytesMockConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<SampleRedstoneConsumerBytesMock>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): SampleRedstoneConsumerBytesMock;
    connect(signer: Signer): SampleRedstoneConsumerBytesMock__factory;
    static readonly bytecode = "0x608060405234801561001057600080fd5b50611929806100206000396000f3fe608060405234801561001057600080fd5b50600436106100df5760003560e01c806395262d9f1161008c578063c3e5b9c811610066578063c3e5b9c8146101a7578063d22158fa146101ba578063f50b2efe146101cd578063f90c4924146101e057600080fd5b806395262d9f14610179578063b24ebfcc1461018c578063c274583a1461019f57600080fd5b8063429989f0116100bd578063429989f01461014757806355a547d51461015a5780635ddf81ba1461017057600080fd5b806313bc58db146100e45780633ce142f51461010d5780633d60fee314610132575b600080fd5b6100f76100f23660046116ae565b6101e7565b60405161010491906117d1565b60405180910390f35b61012061011b36600461167a565b61030b565b60405160ff9091168152602001610104565b61014561014036600461176e565b61031c565b005b61012061015536600461167a565b610340565b610162610819565b604051908152602001610104565b61016260005481565b61012061018736600461167a565b610973565b61016261019a3660046116ae565b61097e565b6100f7610991565b6101626101b536600461176e565b6109c5565b6101206101c836600461167a565b6109e8565b6101456101db36600461176e565b610a6f565b6003610120565b60606000825167ffffffffffffffff81111561021357634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561023c578160200160208202803683370190505b50905060005b83518110156102cf5736600061027e86848151811061027157634e487b7160e01b600052603260045260246000fd5b6020026020010151610ab2565b9092509050813560088202610100031c8484815181106102ae57634e487b7160e01b600052603260045260246000fd5b602002602001018181525050505080806102c790611864565b915050610242565b5060006102db82610b22565b90506000816040516020016102f291815260200190565b60408051601f1981840301815291905295945050505050565b600061031682610973565b92915050565b600061032782610c36565b80516020820151919250600802610100031c6000555050565b600073f39fd6e51aad88f6f4ce6ab8827279cfffb9226673ffffffffffffffffffffffffffffffffffffffff8316141561037c57506000919050565b7370997970c51812dc3a010c7d01b50e0d17dc79c873ffffffffffffffffffffffffffffffffffffffff831614156103b657506001919050565b733c44cdddb6a900fa2b585dd299e03d12fa4293bc73ffffffffffffffffffffffffffffffffffffffff831614156103f057506002919050565b7390f79bf6eb2c4f870365e785982e1f101e93b90673ffffffffffffffffffffffffffffffffffffffff8316141561042a57506003919050565b7315d34aaf54267db7d7c367839aaf71a00a2c6a6573ffffffffffffffffffffffffffffffffffffffff8316141561046457506004919050565b739965507d1a55bcc2695c58ba16fb37d819b0a4dc73ffffffffffffffffffffffffffffffffffffffff8316141561049e57506005919050565b73976ea74026e726554db657fa54763abd0c3a0aa973ffffffffffffffffffffffffffffffffffffffff831614156104d857506006919050565b7314dc79964da2c08b23698b3d3cc7ca32193d995573ffffffffffffffffffffffffffffffffffffffff8316141561051257506007919050565b7323618e81e3f5cdf7f54c3d65f7fbc0abf5b21e8f73ffffffffffffffffffffffffffffffffffffffff8316141561054c57506008919050565b73a0ee7a142d267c1f36714e4a8f75612f20a7972073ffffffffffffffffffffffffffffffffffffffff8316141561058657506009919050565b73bcd4042de499d14e55001ccbb24a551f3b95409673ffffffffffffffffffffffffffffffffffffffff831614156105c05750600a919050565b7371be63f3384f5fb98995898a86b02fb2426c578873ffffffffffffffffffffffffffffffffffffffff831614156105fa5750600b919050565b73fabb0ac9d68b0b445fb7357272ff202c5651694a73ffffffffffffffffffffffffffffffffffffffff831614156106345750600c919050565b731cbd3b2770909d4e10f157cabc84c7264073c9ec73ffffffffffffffffffffffffffffffffffffffff8316141561066e5750600d919050565b73df3e18d64bc6a983f673ab319ccae4f1a57c709773ffffffffffffffffffffffffffffffffffffffff831614156106a85750600e919050565b73cd3b766ccdd6ae721141f452c550ca635964ce7173ffffffffffffffffffffffffffffffffffffffff831614156106e25750600f919050565b732546bcd3c84621e976d8185a91a922ae77ecec3073ffffffffffffffffffffffffffffffffffffffff8316141561071c57506010919050565b73bda5747bfd65f08deb54cb465eb87d40e51b197e73ffffffffffffffffffffffffffffffffffffffff8316141561075657506011919050565b73dd2fd4581271e230360230f9337d5c0430bf44c073ffffffffffffffffffffffffffffffffffffffff8316141561079057506012919050565b738626f6940e2eb28930efb4cef49b2d1f2c9c119973ffffffffffffffffffffffffffffffffffffffff831614156107ca57506013919050565b6040517fec459bc000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff831660048201526024015b60405180910390fd5b600080610824610cb3565b9050600061083182610dc3565b61ffff1690508061086e576040517f8552ff3c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6108796002836117e4565b915060005b8181101561096d57600061089184610e16565b90506000806108a16068876117e4565b905060006108af823661184d565b80359350905065ffffffffffff83166108f4576040517f336dc9d000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b87610909578265ffffffffffff16975061094a565b878365ffffffffffff161461094a576040517fd9d1f46500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61095484886117e4565b965050505050808061096590611864565b91505061087e565b50505090565b6000610316826109e8565b60008061098a836101e7565b9392505050565b60606040517f608b530700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000806109d183610c36565b80516020820151919250600802610100031c61098a565b6000738626f6940e2eb28930efb4cef49b2d1f2c9c119973ffffffffffffffffffffffffffffffffffffffff83161415610a66576040517fec459bc000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83166004820152602401610810565b61031682610340565b6501812f2590c0811015610aaf576040517f355b874300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b36600080610ac08460801c90565b90506fffffffffffffffffffffffffffffffff841636610ae082846117e4565b1115610b18576040517fb0e86e5100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b9094909350915050565b6000815160001415610b60576040517f9e198af900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610b6982610e4a565b600060028351610b7991906117fc565b905060028351610b89919061189d565b610c06576000610bf184610b9e60018561184d565b81518110610bbc57634e487b7160e01b600052603260045260246000fd5b6020026020010151858481518110610be457634e487b7160e01b600052603260045260246000fd5b6020026020010151610e98565b9050610bfe6002826117fc565b949350505050565b828181518110610c2657634e487b7160e01b600052603260045260246000fd5b6020026020010151915050919050565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110610c7e57634e487b7160e01b600052603260045260246000fd5b602002602001018181525050610c9381610ea4565b600081518110610c2657634e487b7160e01b600052603260045260246000fd5b60006602ed57011e0000601f1936013581161480610cfd576040517fe7764c9e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60003660291115610d3a576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd736013560006009610d73600362ffffff85166117e4565b610d7d91906117e4565b905036610d8b6002836117e4565b111561098a576040517fc30a7bd700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080610dd16020846117e4565b905036811115610e0d576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b36033592915050565b6000806000610e2484610eb1565b9092509050604e610e368260206117e4565b610e409084611810565b610bfe91906117e4565b8051602082016020820281019150805b82811015610e9257815b81811015610e89578151815180821015610e7f578084528183525b5050602001610e64565b50602001610e5a565b50505050565b600061098a82846117e4565b6060600061098a83610f08565b600080808080610ec26041876117e4565b90506000610edb610ed46020846117e4565b3690611105565b803594509050610eec816003611105565b62ffffff9490941697933563ffffffff16965092945050505050565b60606000825167ffffffffffffffff811115610f3457634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610f5d578160200160208202803683370190505b5090506000835167ffffffffffffffff811115610f8a57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610fb3578160200160208202803683370190505b5090506000845167ffffffffffffffff811115610fe057634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561101357816020015b6060815260200190600190039081610ffe5790505b50905060005b855181101561107f576040805160038082526080820190925290602082016060803683370190505082828151811061106157634e487b7160e01b600052603260045260246000fd5b6020026020010181905250808061107790611864565b915050611019565b50600061108a610cb3565b9050600061109782610dc3565b61ffff1690506110a86002836117e4565b60405190925060005b828110156110ee5760006110c88a89898989611111565b90506110d481866117e4565b9450826040525080806110e690611864565b9150506110b1565b506110f9848761141b565b98975050505050505050565b600061098a828461184d565b60008060008061112085610eb1565b909250905060008080606081600d61114361113c6020896117e4565b8990611593565b61114d91906117e4565b9050600061115f610ed460688d6117e4565b9050600061117c8361117260418f6117e4565b610ed491906117e4565b9050611188838261119b565b93508260208501209450813596506111bf565b60408051838152602081850181019092526000910183838237601f19019392505050565b6111d08765ffffffffffff16610a6f565b6111e4856111df60418f6117e4565b61159f565b95506111ef8661030b565b60ff1699505050505050505060008060005b848110156113e857611214888583611617565b909350915060005b8c518110156113d5578c818151811061124557634e487b7160e01b600052603260045260246000fd5b60200260200101518414156113c35760008b828151811061127657634e487b7160e01b600052603260045260246000fd5b6020026020010151905061128f81896001901b16151590565b1580156112c65750600360ff168d83815181106112bc57634e487b7160e01b600052603260045260246000fd5b6020026020010151105b156113bd578c82815181106112eb57634e487b7160e01b600052603260045260246000fd5b60200260200101805180919061130090611864565b81525050838b838151811061132557634e487b7160e01b600052603260045260246000fd5b602002602001015160018f858151811061134f57634e487b7160e01b600052603260045260246000fd5b6020026020010151611361919061184d565b8151811061137f57634e487b7160e01b600052603260045260246000fd5b60209081029190910101526001881b81178c83815181106113b057634e487b7160e01b600052603260045260246000fd5b6020026020010181815250505b506113d5565b806113cd81611864565b91505061121c565b50806113e081611864565b915050611201565b505050816020826113f991906117e4565b6114039190611810565b61140e90604e6117e4565b9998505050505050505050565b60606000835167ffffffffffffffff81111561144757634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611470578160200160208202803683370190505b509050600360005b855181101561158957818582815181106114a257634e487b7160e01b600052603260045260246000fd5b60200260200101511015611516578481815181106114d057634e487b7160e01b600052603260045260246000fd5b6020026020010151826040517f2b13aef5000000000000000000000000000000000000000000000000000000008152600401610810929190918252602082015260400190565b600061154887838151811061153b57634e487b7160e01b600052603260045260246000fd5b602002602001015161097e565b90508084838151811061156b57634e487b7160e01b600052603260045260246000fd5b6020908102919091010152508061158181611864565b915050611478565b5090949350505050565b600061098a8284611810565b60408051600080825260208083018085528690523685900380850135831a948401859052803560608501819052910135608084018190529193909260019060a0016020604051602081039080840390855afa158015611602573d6000803e3d6000fd5b5050604051601f190151979650505050505050565b60008080611626604e876117e4565b905060006116496116386020886117e4565b6116438760016117e4565b90611593565b61165390836117e4565b905060006116613683611105565b803599602090910160801b979097179750505050505050565b60006020828403121561168b578081fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461098a578182fd5b600060208083850312156116c0578182fd5b823567ffffffffffffffff808211156116d7578384fd5b818501915085601f8301126116ea578384fd5b8135818111156116fc576116fc6118dd565b8060051b604051601f19603f83011681018181108582111715611721576117216118dd565b604052828152858101935084860182860187018a101561173f578788fd5b8795505b83861015611761578035855260019590950194938601938601611743565b5098975050505050505050565b60006020828403121561177f578081fd5b5035919050565b60008151808452815b818110156117ab5760208185018101518683018201520161178f565b818111156117bc5782602083870101525b50601f01601f19169290920160200192915050565b60208152600061098a6020830184611786565b600082198211156117f7576117f76118b1565b500190565b60008261180b5761180b6118c7565b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611848576118486118b1565b500290565b60008282101561185f5761185f6118b1565b500390565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611896576118966118b1565b5060010190565b6000826118ac576118ac6118c7565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220b887430a2e5730a035fc6346fb31ed5525ce24c6d269be7e26e97963b1328fa164736f6c63430008040033";
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "CalldataMustHaveValidPayload";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "CalldataOverOrUnderFlow";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "CanNotPickMedianOfEmptyArray";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "DataPackageTimestampMustNotBeZero";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "DataPackageTimestampsMustBeEqual";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "EachSignerMustProvideTheSameValue";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "EmptyCalldataPointersArr";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "GetDataServiceIdNotImplemented";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "IncorrectUnsignedMetadataSize";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "receivedSignersCount";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "requiredSignersCount";
            readonly type: "uint256";
        }];
        readonly name: "InsufficientNumberOfUniqueSigners";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidCalldataPointer";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "RedstonePayloadMustHaveAtLeastOneDataPackage";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "receivedSigner";
            readonly type: "address";
        }];
        readonly name: "SignerNotAuthorised";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "TimestampIsNotValid";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256[]";
            readonly name: "calldataPointersForValues";
            readonly type: "uint256[]";
        }];
        readonly name: "aggregateByteValues";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256[]";
            readonly name: "calldataPointersToValues";
            readonly type: "uint256[]";
        }];
        readonly name: "aggregateValues";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "pointerToResultBytesInMemory";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "extractTimestampsAndAssertAllAreEqual";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "extractedTimestamp";
            readonly type: "uint256";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "signerAddress";
            readonly type: "address";
        }];
        readonly name: "getAllMockAuthorised";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "signerAddress";
            readonly type: "address";
        }];
        readonly name: "getAllMockExceptLastOneAuthorised";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "signerAddress";
            readonly type: "address";
        }];
        readonly name: "getAuthorisedMockSignerIndex";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "signerAddress";
            readonly type: "address";
        }];
        readonly name: "getAuthorisedSignerIndex";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getDataServiceId";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getUniqueSignersThreshold";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "dataFeedId";
            readonly type: "bytes32";
        }];
        readonly name: "getValueSecurely";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "latestSavedValue";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "dataFeedId";
            readonly type: "bytes32";
        }];
        readonly name: "saveOracleValueInContractStorage";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "receivedTimestampMilliseconds";
            readonly type: "uint256";
        }];
        readonly name: "validateTimestamp";
        readonly outputs: readonly [];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): SampleRedstoneConsumerBytesMockInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): SampleRedstoneConsumerBytesMock;
}
export {};
//# sourceMappingURL=SampleRedstoneConsumerBytesMock__factory.d.ts.map