"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SampleRedstoneConsumerNumericMockManyDataFeeds__factory = void 0;
const ethers_1 = require("ethers");
const _abi = [
    {
        inputs: [],
        name: "CalldataMustHaveValidPayload",
        type: "error",
    },
    {
        inputs: [],
        name: "CalldataOverOrUnderFlow",
        type: "error",
    },
    {
        inputs: [],
        name: "CanNotPickMedianOfEmptyArray",
        type: "error",
    },
    {
        inputs: [],
        name: "DataPackageTimestampMustNotBeZero",
        type: "error",
    },
    {
        inputs: [],
        name: "DataPackageTimestampsMustBeEqual",
        type: "error",
    },
    {
        inputs: [],
        name: "EachSignerMustProvideTheSameValue",
        type: "error",
    },
    {
        inputs: [],
        name: "EmptyCalldataPointersArr",
        type: "error",
    },
    {
        inputs: [],
        name: "GetDataServiceIdNotImplemented",
        type: "error",
    },
    {
        inputs: [],
        name: "IncorrectUnsignedMetadataSize",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "receivedSignersCount",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "requiredSignersCount",
                type: "uint256",
            },
        ],
        name: "InsufficientNumberOfUniqueSigners",
        type: "error",
    },
    {
        inputs: [],
        name: "InvalidCalldataPointer",
        type: "error",
    },
    {
        inputs: [],
        name: "RedstonePayloadMustHaveAtLeastOneDataPackage",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "receivedSigner",
                type: "address",
            },
        ],
        name: "SignerNotAuthorised",
        type: "error",
    },
    {
        inputs: [],
        name: "TimestampIsNotValid",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "uint256[]",
                name: "values",
                type: "uint256[]",
            },
        ],
        name: "aggregateValues",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "extractTimestampsAndAssertAllAreEqual",
        outputs: [
            {
                internalType: "uint256",
                name: "extractedTimestamp",
                type: "uint256",
            },
        ],
        stateMutability: "pure",
        type: "function",
    },
    {
        inputs: [],
        name: "firstValue",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "signerAddress",
                type: "address",
            },
        ],
        name: "getAllMockAuthorised",
        outputs: [
            {
                internalType: "uint8",
                name: "",
                type: "uint8",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "signerAddress",
                type: "address",
            },
        ],
        name: "getAllMockExceptLastOneAuthorised",
        outputs: [
            {
                internalType: "uint8",
                name: "",
                type: "uint8",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "signerAddress",
                type: "address",
            },
        ],
        name: "getAuthorisedMockSignerIndex",
        outputs: [
            {
                internalType: "uint8",
                name: "",
                type: "uint8",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "signerAddress",
                type: "address",
            },
        ],
        name: "getAuthorisedSignerIndex",
        outputs: [
            {
                internalType: "uint8",
                name: "",
                type: "uint8",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "getDataServiceId",
        outputs: [
            {
                internalType: "string",
                name: "",
                type: "string",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "getUniqueSignersThreshold",
        outputs: [
            {
                internalType: "uint8",
                name: "",
                type: "uint8",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes32[]",
                name: "dataFeedIds",
                type: "bytes32[]",
            },
        ],
        name: "save2ValuesInStorage",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes32[]",
                name: "dataFeedIds",
                type: "bytes32[]",
            },
            {
                internalType: "bytes",
                name: "",
                type: "bytes",
            },
        ],
        name: "save2ValuesInStorageWithManualPayload",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [],
        name: "secondValue",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "receivedTimestampMilliseconds",
                type: "uint256",
            },
        ],
        name: "validateTimestamp",
        outputs: [],
        stateMutability: "view",
        type: "function",
    },
];
const _bytecode = "0x608060405234801561001057600080fd5b5061191c806100206000396000f3fe608060405234801561001057600080fd5b50600436106100df5760003560e01c806395262d9f1161008c578063d22158fa11610066578063d22158fa14610199578063f4afad24146101ac578063f50b2efe146101bf578063f90c4924146101d257600080fd5b806395262d9f1461015e578063b24ebfcc14610171578063c274583a1461018457600080fd5b806355a547d5116100bd57806355a547d5146101385780637a7a2881146101405780637b94ce291461015557600080fd5b80632cfed611146100e45780633ce142f514610100578063429989f014610125575b600080fd5b6100ed60015481565b6040519081526020015b60405180910390f35b61011361010e36600461156b565b6101d9565b60405160ff90911681526020016100f7565b61011361013336600461156b565b6101ea565b6100ed6106c3565b61015361014e36600461159f565b61081d565b005b6100ed60005481565b61011361016c36600461156b565b6108c0565b6100ed61017f366004611670565b6108cb565b61018c6108d6565b6040516100f79190611766565b6101136101a736600461156b565b61090a565b6101536101ba3660046115df565b610991565b6101536101cd36600461174e565b6109a1565b600a610113565b60006101e4826108c0565b92915050565b600073f39fd6e51aad88f6f4ce6ab8827279cfffb9226673ffffffffffffffffffffffffffffffffffffffff8316141561022657506000919050565b7370997970c51812dc3a010c7d01b50e0d17dc79c873ffffffffffffffffffffffffffffffffffffffff8316141561026057506001919050565b733c44cdddb6a900fa2b585dd299e03d12fa4293bc73ffffffffffffffffffffffffffffffffffffffff8316141561029a57506002919050565b7390f79bf6eb2c4f870365e785982e1f101e93b90673ffffffffffffffffffffffffffffffffffffffff831614156102d457506003919050565b7315d34aaf54267db7d7c367839aaf71a00a2c6a6573ffffffffffffffffffffffffffffffffffffffff8316141561030e57506004919050565b739965507d1a55bcc2695c58ba16fb37d819b0a4dc73ffffffffffffffffffffffffffffffffffffffff8316141561034857506005919050565b73976ea74026e726554db657fa54763abd0c3a0aa973ffffffffffffffffffffffffffffffffffffffff8316141561038257506006919050565b7314dc79964da2c08b23698b3d3cc7ca32193d995573ffffffffffffffffffffffffffffffffffffffff831614156103bc57506007919050565b7323618e81e3f5cdf7f54c3d65f7fbc0abf5b21e8f73ffffffffffffffffffffffffffffffffffffffff831614156103f657506008919050565b73a0ee7a142d267c1f36714e4a8f75612f20a7972073ffffffffffffffffffffffffffffffffffffffff8316141561043057506009919050565b73bcd4042de499d14e55001ccbb24a551f3b95409673ffffffffffffffffffffffffffffffffffffffff8316141561046a5750600a919050565b7371be63f3384f5fb98995898a86b02fb2426c578873ffffffffffffffffffffffffffffffffffffffff831614156104a45750600b919050565b73fabb0ac9d68b0b445fb7357272ff202c5651694a73ffffffffffffffffffffffffffffffffffffffff831614156104de5750600c919050565b731cbd3b2770909d4e10f157cabc84c7264073c9ec73ffffffffffffffffffffffffffffffffffffffff831614156105185750600d919050565b73df3e18d64bc6a983f673ab319ccae4f1a57c709773ffffffffffffffffffffffffffffffffffffffff831614156105525750600e919050565b73cd3b766ccdd6ae721141f452c550ca635964ce7173ffffffffffffffffffffffffffffffffffffffff8316141561058c5750600f919050565b732546bcd3c84621e976d8185a91a922ae77ecec3073ffffffffffffffffffffffffffffffffffffffff831614156105c657506010919050565b73bda5747bfd65f08deb54cb465eb87d40e51b197e73ffffffffffffffffffffffffffffffffffffffff8316141561060057506011919050565b73dd2fd4581271e230360230f9337d5c0430bf44c073ffffffffffffffffffffffffffffffffffffffff8316141561063a57506012919050565b738626f6940e2eb28930efb4cef49b2d1f2c9c119973ffffffffffffffffffffffffffffffffffffffff8316141561067457506013919050565b6040517fec459bc000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff831660048201526024015b60405180910390fd5b6000806106ce6109e4565b905060006106db82610b19565b61ffff16905080610718576040517f8552ff3c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6107236002836117d7565b915060005b8181101561081757600061073b84610b6c565b905060008061074b6068876117d7565b905060006107598236611840565b80359350905065ffffffffffff831661079e576040517f336dc9d000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b876107b3578265ffffffffffff1697506107f4565b878365ffffffffffff16146107f4576040517fd9d1f46500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6107fe84886117d7565b965050505050808061080f90611857565b915050610728565b50505090565b600061085b838380806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250610ba892505050565b90508060008151811061087e57634e487b7160e01b600052603260045260246000fd5b6020026020010151600081905550806001815181106108ad57634e487b7160e01b600052603260045260246000fd5b6020026020010151600181905550505050565b60006101e48261090a565b60006101e482610bb3565b60606040517f608b530700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000738626f6940e2eb28930efb4cef49b2d1f2c9c119973ffffffffffffffffffffffffffffffffffffffff83161415610988576040517fec459bc000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff831660048201526024016106ba565b6101e4826101ea565b61099b848461081d565b50505050565b6501812f2590c08110156109e1576040517f355b874300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b60006602ed57011e00007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe036013581161480610a4c576040517fe7764c9e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60003660291115610a89576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd736013560006009610ac2600362ffffff85166117d7565b610acc91906117d7565b905036610ada6002836117d7565b1115610b12576040517fc30a7bd700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b9392505050565b600080610b276020846117d7565b905036811115610b63576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b36033592915050565b6000806000610b7a84610bbe565b9092509050604e610b8c8260206117d7565b610b969084611803565b610ba091906117d7565b949350505050565b60606101e482610c15565b60006101e482610e14565b600080808080610bcf6041876117d7565b90506000610be8610be16020846117d7565b3690610f20565b803594509050610bf9816003610f20565b62ffffff9490941697933563ffffffff16965092945050505050565b60606000825167ffffffffffffffff811115610c4157634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610c6a578160200160208202803683370190505b5090506000835167ffffffffffffffff811115610c9757634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610cc0578160200160208202803683370190505b5090506000845167ffffffffffffffff811115610ced57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610d2057816020015b6060815260200190600190039081610d0b5790505b50905060005b8551811015610d8e5760408051600a808252610160820190925290602082016101408036833701905050828281518110610d7057634e487b7160e01b600052603260045260246000fd5b60200260200101819052508080610d8690611857565b915050610d26565b506000610d996109e4565b90506000610da682610b19565b61ffff169050610db76002836117d7565b60405190925060005b82811015610dfd576000610dd78a89898989610f2c565b9050610de381866117d7565b945082604052508080610df590611857565b915050610dc0565b50610e088487611254565b98975050505050505050565b6000815160001415610e52576040517f9e198af900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610e5b826113cc565b600060028351610e6b91906117ef565b905060028351610e7b9190611890565b610ef0576000610ee384610e90600185611840565b81518110610eae57634e487b7160e01b600052603260045260246000fd5b6020026020010151858481518110610ed657634e487b7160e01b600052603260045260246000fd5b6020026020010151611414565b9050610ba06002826117ef565b828181518110610f1057634e487b7160e01b600052603260045260246000fd5b6020026020010151915050919050565b6000610b128284611840565b600080600080610f3b85610bbe565b909250905060008080606081600d610f5e610f576020896117d7565b8990611420565b610f6891906117d7565b90506000610f7a610be160688d6117d7565b90506000610f9783610f8d60418f6117d7565b610be191906117d7565b9050610fa38382610fb6565b9350826020850120945081359650610ff8565b604080518381526020818501810190925260009101838382377fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0019392505050565b6110098765ffffffffffff166109a1565b61101d8561101860418f6117d7565b61142c565b9550611028866101d9565b60ff1699505050505050505060008060005b848110156112215761104d8885836114c2565b909350915060005b8c5181101561120e578c818151811061107e57634e487b7160e01b600052603260045260246000fd5b60200260200101518414156111fc5760008b82815181106110af57634e487b7160e01b600052603260045260246000fd5b602002602001015190506110c881896001901b16151590565b1580156110ff5750600a60ff168d83815181106110f557634e487b7160e01b600052603260045260246000fd5b6020026020010151105b156111f6578c828151811061112457634e487b7160e01b600052603260045260246000fd5b60200260200101805180919061113990611857565b81525050838b838151811061115e57634e487b7160e01b600052603260045260246000fd5b602002602001015160018f858151811061118857634e487b7160e01b600052603260045260246000fd5b602002602001015161119a9190611840565b815181106111b857634e487b7160e01b600052603260045260246000fd5b60209081029190910101526001881b81178c83815181106111e957634e487b7160e01b600052603260045260246000fd5b6020026020010181815250505b5061120e565b8061120681611857565b915050611055565b508061121981611857565b91505061103a565b5050508160208261123291906117d7565b61123c9190611803565b61124790604e6117d7565b9998505050505050505050565b60606000835167ffffffffffffffff81111561128057634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156112a9578160200160208202803683370190505b509050600a60005b85518110156113c257818582815181106112db57634e487b7160e01b600052603260045260246000fd5b6020026020010151101561134f5784818151811061130957634e487b7160e01b600052603260045260246000fd5b6020026020010151826040517f2b13aef50000000000000000000000000000000000000000000000000000000081526004016106ba929190918252602082015260400190565b600061138187838151811061137457634e487b7160e01b600052603260045260246000fd5b60200260200101516108cb565b9050808483815181106113a457634e487b7160e01b600052603260045260246000fd5b602090810291909101015250806113ba81611857565b9150506112b1565b5090949350505050565b8051602082016020820281019150805b8281101561099b57815b8181101561140b578151815180821015611401578084528183525b50506020016113e6565b506020016113dc565b6000610b1282846117d7565b6000610b128284611803565b60408051600080825260208083018085528690523685900380850135831a948401859052803560608501819052910135608084018190529193909260019060a0016020604051602081039080840390855afa15801561148f573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00151979650505050505050565b600080806114d1604e876117d7565b905060006114fe6114f76114e66020896117d7565b6114f18860016117d7565b90611420565b8390611414565b9050600061150c3683610f20565b80359960209091013598509650505050505050565b60008083601f840112611532578081fd5b50813567ffffffffffffffff811115611549578182fd5b6020830191508360208260051b850101111561156457600080fd5b9250929050565b60006020828403121561157c578081fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114610b12578182fd5b600080602083850312156115b1578081fd5b823567ffffffffffffffff8111156115c7578182fd5b6115d385828601611521565b90969095509350505050565b600080600080604085870312156115f4578182fd5b843567ffffffffffffffff8082111561160b578384fd5b61161788838901611521565b9096509450602087013591508082111561162f578384fd5b818701915087601f830112611642578384fd5b813581811115611650578485fd5b886020828501011115611661578485fd5b95989497505060200194505050565b60006020808385031215611682578182fd5b823567ffffffffffffffff80821115611699578384fd5b818501915085601f8301126116ac578384fd5b8135818111156116be576116be6118d0565b8060051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f83011681018181108582111715611701576117016118d0565b604052828152858101935084860182860187018a101561171f578788fd5b8795505b83861015611741578035855260019590950194938601938601611723565b5098975050505050505050565b60006020828403121561175f578081fd5b5035919050565b6000602080835283518082850152825b8181101561179257858101830151858201604001528201611776565b818111156117a35783604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b600082198211156117ea576117ea6118a4565b500190565b6000826117fe576117fe6118ba565b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561183b5761183b6118a4565b500290565b600082821015611852576118526118a4565b500390565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611889576118896118a4565b5060010190565b60008261189f5761189f6118ba565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220c0a6039e3e319c10ab43fdde130d2a8fe13c7e674002a15ddb6247c89d59223264736f6c63430008040033";
const isSuperArgs = (xs) => xs.length > 1;
class SampleRedstoneConsumerNumericMockManyDataFeeds__factory extends ethers_1.ContractFactory {
    constructor(...args) {
        if (isSuperArgs(args)) {
            super(...args);
        }
        else {
            super(_abi, _bytecode, args[0]);
        }
    }
    deploy(overrides) {
        return super.deploy(overrides || {});
    }
    getDeployTransaction(overrides) {
        return super.getDeployTransaction(overrides || {});
    }
    attach(address) {
        return super.attach(address);
    }
    connect(signer) {
        return super.connect(signer);
    }
    static bytecode = _bytecode;
    static abi = _abi;
    static createInterface() {
        return new ethers_1.utils.Interface(_abi);
    }
    static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
    }
}
exports.SampleRedstoneConsumerNumericMockManyDataFeeds__factory = SampleRedstoneConsumerNumericMockManyDataFeeds__factory;
//# sourceMappingURL=SampleRedstoneConsumerNumericMockManyDataFeeds__factory.js.map