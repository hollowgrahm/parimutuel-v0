import { Signer, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type { SampleForLocalhostMockTest, SampleForLocalhostMockTestInterface } from "../../../contracts/samples/SampleForLocalhostMockTest";
type SampleForLocalhostMockTestConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class SampleForLocalhostMockTest__factory extends ContractFactory {
    constructor(...args: SampleForLocalhostMockTestConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<SampleForLocalhostMockTest>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): SampleForLocalhostMockTest;
    connect(signer: Signer): SampleForLocalhostMockTest__factory;
    static readonly bytecode = "0x608060405234801561001057600080fd5b5061180e806100206000396000f3fe608060405234801561001057600080fd5b50600436106100be5760003560e01c8063b24ebfcc11610076578063d22158fa1161005b578063d22158fa14610175578063f50b2efe14610188578063f90c49241461019d57600080fd5b8063b24ebfcc1461014d578063c274583a1461016057600080fd5b8063429989f0116100a7578063429989f01461011157806355a547d51461012457806395262d9f1461013a57600080fd5b80633ca611a3146100c35780633ce142f5146100ec575b600080fd5b6100d66100d13660046114ae565b6101a4565b6040516100e39190611614565b60405180910390f35b6100ff6100fa36600461147a565b6101e9565b60405160ff90911681526020016100e3565b6100ff61011f36600461147a565b6101fa565b61012c6106d3565b6040519081526020016100e3565b6100ff61014836600461147a565b61082d565b61012c61015b36600461151e565b610838565b610168610843565b6040516100e39190611658565b6100ff61018336600461147a565b610877565b61019b6101963660046115fc565b6108fe565b005b60016100ff565b60606101e283838080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061094192505050565b9392505050565b60006101f48261082d565b92915050565b600073f39fd6e51aad88f6f4ce6ab8827279cfffb9226673ffffffffffffffffffffffffffffffffffffffff8316141561023657506000919050565b7370997970c51812dc3a010c7d01b50e0d17dc79c873ffffffffffffffffffffffffffffffffffffffff8316141561027057506001919050565b733c44cdddb6a900fa2b585dd299e03d12fa4293bc73ffffffffffffffffffffffffffffffffffffffff831614156102aa57506002919050565b7390f79bf6eb2c4f870365e785982e1f101e93b90673ffffffffffffffffffffffffffffffffffffffff831614156102e457506003919050565b7315d34aaf54267db7d7c367839aaf71a00a2c6a6573ffffffffffffffffffffffffffffffffffffffff8316141561031e57506004919050565b739965507d1a55bcc2695c58ba16fb37d819b0a4dc73ffffffffffffffffffffffffffffffffffffffff8316141561035857506005919050565b73976ea74026e726554db657fa54763abd0c3a0aa973ffffffffffffffffffffffffffffffffffffffff8316141561039257506006919050565b7314dc79964da2c08b23698b3d3cc7ca32193d995573ffffffffffffffffffffffffffffffffffffffff831614156103cc57506007919050565b7323618e81e3f5cdf7f54c3d65f7fbc0abf5b21e8f73ffffffffffffffffffffffffffffffffffffffff8316141561040657506008919050565b73a0ee7a142d267c1f36714e4a8f75612f20a7972073ffffffffffffffffffffffffffffffffffffffff8316141561044057506009919050565b73bcd4042de499d14e55001ccbb24a551f3b95409673ffffffffffffffffffffffffffffffffffffffff8316141561047a5750600a919050565b7371be63f3384f5fb98995898a86b02fb2426c578873ffffffffffffffffffffffffffffffffffffffff831614156104b45750600b919050565b73fabb0ac9d68b0b445fb7357272ff202c5651694a73ffffffffffffffffffffffffffffffffffffffff831614156104ee5750600c919050565b731cbd3b2770909d4e10f157cabc84c7264073c9ec73ffffffffffffffffffffffffffffffffffffffff831614156105285750600d919050565b73df3e18d64bc6a983f673ab319ccae4f1a57c709773ffffffffffffffffffffffffffffffffffffffff831614156105625750600e919050565b73cd3b766ccdd6ae721141f452c550ca635964ce7173ffffffffffffffffffffffffffffffffffffffff8316141561059c5750600f919050565b732546bcd3c84621e976d8185a91a922ae77ecec3073ffffffffffffffffffffffffffffffffffffffff831614156105d657506010919050565b73bda5747bfd65f08deb54cb465eb87d40e51b197e73ffffffffffffffffffffffffffffffffffffffff8316141561061057506011919050565b73dd2fd4581271e230360230f9337d5c0430bf44c073ffffffffffffffffffffffffffffffffffffffff8316141561064a57506012919050565b738626f6940e2eb28930efb4cef49b2d1f2c9c119973ffffffffffffffffffffffffffffffffffffffff8316141561068457506013919050565b6040517fec459bc000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff831660048201526024015b60405180910390fd5b6000806106de61094c565b905060006106eb82610a7a565b61ffff16905080610728576040517f8552ff3c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6107336002836116c9565b915060005b8181101561082757600061074b84610acd565b905060008061075b6068876116c9565b905060006107698236611732565b80359350905065ffffffffffff83166107ae576040517f336dc9d000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b876107c3578265ffffffffffff169750610804565b878365ffffffffffff1614610804576040517fd9d1f46500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61080e84886116c9565b965050505050808061081f90611749565b915050610738565b50505090565b60006101f482610877565b60006101f482610b09565b60606040517f608b530700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000738626f6940e2eb28930efb4cef49b2d1f2c9c119973ffffffffffffffffffffffffffffffffffffffff831614156108f5576040517fec459bc000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff831660048201526024016106ca565b6101f4826101fa565b6501812f2590c081101561093e576040517f355b874300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b60606101f482610b14565b60006602ed57011e00007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0360135811614806109b4576040517fe7764c9e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600036602911156109f1576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd736013560006009610a2a600362ffffff85166116c9565b610a3491906116c9565b905036610a426002836116c9565b11156101e2576040517fc30a7bd700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080610a886020846116c9565b905036811115610ac4576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b36033592915050565b6000806000610adb84610d10565b9092509050604e610aed8260206116c9565b610af790846116f5565b610b0191906116c9565b949350505050565b60006101f482610d67565b60606000825167ffffffffffffffff811115610b4057634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610b69578160200160208202803683370190505b5090506000835167ffffffffffffffff811115610b9657634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610bbf578160200160208202803683370190505b5090506000845167ffffffffffffffff811115610bec57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610c1f57816020015b6060815260200190600190039081610c0a5790505b50905060005b8551811015610c8a57604080516001808252818301909252906020808301908036833701905050828281518110610c6c57634e487b7160e01b600052603260045260246000fd5b60200260200101819052508080610c8290611749565b915050610c25565b506000610c9561094c565b90506000610ca282610a7a565b61ffff169050610cb36002836116c9565b60405190925060005b82811015610cf9576000610cd38a89898989610e73565b9050610cdf81866116c9565b945082604052508080610cf190611749565b915050610cbc565b50610d04848761119b565b98975050505050505050565b600080808080610d216041876116c9565b90506000610d3a610d336020846116c9565b3690611313565b803594509050610d4b816003611313565b62ffffff9490941697933563ffffffff16965092945050505050565b6000815160001415610da5576040517f9e198af900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610dae8261131f565b600060028351610dbe91906116e1565b905060028351610dce9190611782565b610e43576000610e3684610de3600185611732565b81518110610e0157634e487b7160e01b600052603260045260246000fd5b6020026020010151858481518110610e2957634e487b7160e01b600052603260045260246000fd5b602002602001015161136d565b9050610b016002826116e1565b828181518110610e6357634e487b7160e01b600052603260045260246000fd5b6020026020010151915050919050565b600080600080610e8285610d10565b909250905060008080606081600d610ea5610e9e6020896116c9565b8990611379565b610eaf91906116c9565b90506000610ec1610d3360688d6116c9565b90506000610ede83610ed460418f6116c9565b610d3391906116c9565b9050610eea8382610efd565b9350826020850120945081359650610f3f565b604080518381526020818501810190925260009101838382377fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0019392505050565b610f508765ffffffffffff166108fe565b610f6485610f5f60418f6116c9565b611385565b9550610f6f866101e9565b60ff1699505050505050505060008060005b8481101561116857610f9488858361141b565b909350915060005b8c51811015611155578c8181518110610fc557634e487b7160e01b600052603260045260246000fd5b60200260200101518414156111435760008b8281518110610ff657634e487b7160e01b600052603260045260246000fd5b6020026020010151905061100f81896001901b16151590565b1580156110465750600160ff168d838151811061103c57634e487b7160e01b600052603260045260246000fd5b6020026020010151105b1561113d578c828151811061106b57634e487b7160e01b600052603260045260246000fd5b60200260200101805180919061108090611749565b81525050838b83815181106110a557634e487b7160e01b600052603260045260246000fd5b602002602001015160018f85815181106110cf57634e487b7160e01b600052603260045260246000fd5b60200260200101516110e19190611732565b815181106110ff57634e487b7160e01b600052603260045260246000fd5b60209081029190910101526001881b81178c838151811061113057634e487b7160e01b600052603260045260246000fd5b6020026020010181815250505b50611155565b8061114d81611749565b915050610f9c565b508061116081611749565b915050610f81565b5050508160208261117991906116c9565b61118391906116f5565b61118e90604e6116c9565b9998505050505050505050565b60606000835167ffffffffffffffff8111156111c757634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156111f0578160200160208202803683370190505b509050600160005b8551811015611309578185828151811061122257634e487b7160e01b600052603260045260246000fd5b602002602001015110156112965784818151811061125057634e487b7160e01b600052603260045260246000fd5b6020026020010151826040517f2b13aef50000000000000000000000000000000000000000000000000000000081526004016106ca929190918252602082015260400190565b60006112c88783815181106112bb57634e487b7160e01b600052603260045260246000fd5b6020026020010151610838565b9050808483815181106112eb57634e487b7160e01b600052603260045260246000fd5b6020908102919091010152508061130181611749565b9150506111f8565b5090949350505050565b60006101e28284611732565b8051602082016020820281019150805b8281101561136757815b8181101561135e578151815180821015611354578084528183525b5050602001611339565b5060200161132f565b50505050565b60006101e282846116c9565b60006101e282846116f5565b60408051600080825260208083018085528690523685900380850135831a948401859052803560608501819052910135608084018190529193909260019060a0016020604051602081039080840390855afa1580156113e8573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00151979650505050505050565b6000808061142a604e876116c9565b9050600061145761145061143f6020896116c9565b61144a8860016116c9565b90611379565b839061136d565b905060006114653683611313565b80359960209091013598509650505050505050565b60006020828403121561148b578081fd5b813573ffffffffffffffffffffffffffffffffffffffff811681146101e2578182fd5b600080602083850312156114c0578081fd5b823567ffffffffffffffff808211156114d7578283fd5b818501915085601f8301126114ea578283fd5b8135818111156114f8578384fd5b8660208260051b850101111561150c578384fd5b60209290920196919550909350505050565b60006020808385031215611530578182fd5b823567ffffffffffffffff80821115611547578384fd5b818501915085601f83011261155a578384fd5b81358181111561156c5761156c6117c2565b8060051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f830116810181811085821117156115af576115af6117c2565b604052828152858101935084860182860187018a10156115cd578788fd5b8795505b838610156115ef5780358552600195909501949386019386016115d1565b5098975050505050505050565b60006020828403121561160d578081fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b8181101561164c57835183529284019291840191600101611630565b50909695505050505050565b6000602080835283518082850152825b8181101561168457858101830151858201604001528201611668565b818111156116955783604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b600082198211156116dc576116dc611796565b500190565b6000826116f0576116f06117ac565b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561172d5761172d611796565b500290565b60008282101561174457611744611796565b500390565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561177b5761177b611796565b5060010190565b600082611791576117916117ac565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea264697066735822122063f53bfb61933d0f39f2fa02412765196fade111f52434da981b40ead5a8314164736f6c63430008040033";
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "CalldataMustHaveValidPayload";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "CalldataOverOrUnderFlow";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "CanNotPickMedianOfEmptyArray";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "DataPackageTimestampMustNotBeZero";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "DataPackageTimestampsMustBeEqual";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "EachSignerMustProvideTheSameValue";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "EmptyCalldataPointersArr";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "GetDataServiceIdNotImplemented";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "IncorrectUnsignedMetadataSize";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "receivedSignersCount";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "requiredSignersCount";
            readonly type: "uint256";
        }];
        readonly name: "InsufficientNumberOfUniqueSigners";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidCalldataPointer";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "RedstonePayloadMustHaveAtLeastOneDataPackage";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "receivedSigner";
            readonly type: "address";
        }];
        readonly name: "SignerNotAuthorised";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "TimestampIsNotValid";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256[]";
            readonly name: "values";
            readonly type: "uint256[]";
        }];
        readonly name: "aggregateValues";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32[]";
            readonly name: "dataFeedIds";
            readonly type: "bytes32[]";
        }];
        readonly name: "extractOracleValuesView";
        readonly outputs: readonly [{
            readonly internalType: "uint256[]";
            readonly name: "";
            readonly type: "uint256[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "extractTimestampsAndAssertAllAreEqual";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "extractedTimestamp";
            readonly type: "uint256";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "signerAddress";
            readonly type: "address";
        }];
        readonly name: "getAllMockAuthorised";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "signerAddress";
            readonly type: "address";
        }];
        readonly name: "getAllMockExceptLastOneAuthorised";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "signerAddress";
            readonly type: "address";
        }];
        readonly name: "getAuthorisedMockSignerIndex";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "signerAddress";
            readonly type: "address";
        }];
        readonly name: "getAuthorisedSignerIndex";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getDataServiceId";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getUniqueSignersThreshold";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "receivedTimestampMilliseconds";
            readonly type: "uint256";
        }];
        readonly name: "validateTimestamp";
        readonly outputs: readonly [];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): SampleForLocalhostMockTestInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): SampleForLocalhostMockTest;
}
export {};
//# sourceMappingURL=SampleForLocalhostMockTest__factory.d.ts.map