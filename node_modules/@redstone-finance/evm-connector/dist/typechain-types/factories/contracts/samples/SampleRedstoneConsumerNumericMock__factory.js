"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SampleRedstoneConsumerNumericMock__factory = void 0;
const ethers_1 = require("ethers");
const _abi = [
    {
        inputs: [],
        name: "CalldataMustHaveValidPayload",
        type: "error",
    },
    {
        inputs: [],
        name: "CalldataOverOrUnderFlow",
        type: "error",
    },
    {
        inputs: [],
        name: "CanNotPickMedianOfEmptyArray",
        type: "error",
    },
    {
        inputs: [],
        name: "DataPackageTimestampMustNotBeZero",
        type: "error",
    },
    {
        inputs: [],
        name: "DataPackageTimestampsMustBeEqual",
        type: "error",
    },
    {
        inputs: [],
        name: "EachSignerMustProvideTheSameValue",
        type: "error",
    },
    {
        inputs: [],
        name: "EmptyCalldataPointersArr",
        type: "error",
    },
    {
        inputs: [],
        name: "GetDataServiceIdNotImplemented",
        type: "error",
    },
    {
        inputs: [],
        name: "IncorrectUnsignedMetadataSize",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "receivedSignersCount",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "requiredSignersCount",
                type: "uint256",
            },
        ],
        name: "InsufficientNumberOfUniqueSigners",
        type: "error",
    },
    {
        inputs: [],
        name: "InvalidCalldataPointer",
        type: "error",
    },
    {
        inputs: [],
        name: "RedstonePayloadMustHaveAtLeastOneDataPackage",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "receivedSigner",
                type: "address",
            },
        ],
        name: "SignerNotAuthorised",
        type: "error",
    },
    {
        inputs: [],
        name: "TimestampIsNotValid",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "uint256[]",
                name: "values",
                type: "uint256[]",
            },
        ],
        name: "aggregateValues",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "extractTimestampFromRedstonePayload",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "pure",
        type: "function",
    },
    {
        inputs: [],
        name: "extractTimestampsAndAssertAllAreEqual",
        outputs: [
            {
                internalType: "uint256",
                name: "extractedTimestamp",
                type: "uint256",
            },
        ],
        stateMutability: "pure",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "signerAddress",
                type: "address",
            },
        ],
        name: "getAllMockAuthorised",
        outputs: [
            {
                internalType: "uint8",
                name: "",
                type: "uint8",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "signerAddress",
                type: "address",
            },
        ],
        name: "getAllMockExceptLastOneAuthorised",
        outputs: [
            {
                internalType: "uint8",
                name: "",
                type: "uint8",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "signerAddress",
                type: "address",
            },
        ],
        name: "getAuthorisedMockSignerIndex",
        outputs: [
            {
                internalType: "uint8",
                name: "",
                type: "uint8",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "signerAddress",
                type: "address",
            },
        ],
        name: "getAuthorisedSignerIndex",
        outputs: [
            {
                internalType: "uint8",
                name: "",
                type: "uint8",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "getDataServiceId",
        outputs: [
            {
                internalType: "string",
                name: "",
                type: "string",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "getUniqueSignersThreshold",
        outputs: [
            {
                internalType: "uint8",
                name: "",
                type: "uint8",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "dataFeedId",
                type: "bytes32",
            },
        ],
        name: "getValueForDataFeedId",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "dataFeedId",
                type: "bytes32",
            },
            {
                internalType: "uint256",
                name: "mockArg1",
                type: "uint256",
            },
            {
                internalType: "string",
                name: "mockArg2",
                type: "string",
            },
            {
                internalType: "string",
                name: "mockArg3",
                type: "string",
            },
            {
                internalType: "string",
                name: "mockArg4",
                type: "string",
            },
            {
                internalType: "string",
                name: "mockArg5",
                type: "string",
            },
            {
                internalType: "string",
                name: "mockArg6",
                type: "string",
            },
        ],
        name: "getValueManyParams",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes32[]",
                name: "dataFeedIds",
                type: "bytes32[]",
            },
        ],
        name: "getValuesForDataFeedIds",
        outputs: [
            {
                internalType: "uint256[]",
                name: "",
                type: "uint256[]",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "latestSavedValue",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "returnMsgValue",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "payable",
        type: "function",
    },
    {
        inputs: [],
        name: "revertWithTestMessage",
        outputs: [],
        stateMutability: "pure",
        type: "function",
    },
    {
        inputs: [],
        name: "revertWithoutMessage",
        outputs: [],
        stateMutability: "pure",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "dataFeedId",
                type: "bytes32",
            },
        ],
        name: "saveOracleValueInContractStorage",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "receivedTimestampMilliseconds",
                type: "uint256",
            },
        ],
        name: "validateTimestamp",
        outputs: [],
        stateMutability: "view",
        type: "function",
    },
];
const _bytecode = "0x608060405234801561001057600080fd5b50611b05806100206000396000f3fe6080604052600436106101295760003560e01c80638e7a4120116100a5578063c274583a11610074578063d6a454c511610059578063d6a454c5146102ff578063f50b2efe14610314578063f90c49241461033457600080fd5b8063c274583a146102bd578063d22158fa146102df57600080fd5b80638e7a41201461026257806395262d9f14610268578063b24ebfcc14610288578063c06a97cb146102a857600080fd5b8063429989f0116100fc57806355a547d5116100e157806355a547d5146102175780635ddf81ba1461022c5780637a1202c81461024257600080fd5b8063429989f0146101ca5780634f178e44146101ea57600080fd5b8063351d31ab1461012e5780633c154daf146101615780633ce142f5146101785780633d60fee3146101aa575b600080fd5b34801561013a57600080fd5b5061014e6101493660046117f5565b610348565b6040519081526020015b60405180910390f35b34801561016d57600080fd5b5061017661035f565b005b34801561018457600080fd5b50610198610193366004611711565b6103c6565b60405160ff9091168152602001610158565b3480156101b657600080fd5b506101766101c53660046117dd565b6103d7565b3480156101d657600080fd5b506101986101e5366004611711565b6103e6565b3480156101f657600080fd5b5061020a610205366004611745565b6108ba565b60405161015891906118d4565b34801561022357600080fd5b5061014e6108c5565b34801561023857600080fd5b5061014e60005481565b34801561024e57600080fd5b5061014e61025d3660046117dd565b610a1f565b3461014e565b34801561027457600080fd5b50610198610283366004611711565b610a2a565b34801561029457600080fd5b5061014e6102a3366004611745565b610a35565b3480156102b457600080fd5b50610176600080fd5b3480156102c957600080fd5b506102d2610a40565b6040516101589190611918565b3480156102eb57600080fd5b506101986102fa366004611711565b610a74565b34801561030b57600080fd5b5061014e610afb565b34801561032057600080fd5b5061017661032f3660046117dd565b610b0a565b34801561034057600080fd5b50600a610198565b600061035388610b4d565b98975050505050505050565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f54657374206d657373616765000000000000000000000000000000000000000060448201526064015b60405180910390fd5b60006103d182610a2a565b92915050565b6103e081610b4d565b60005550565b600073f39fd6e51aad88f6f4ce6ab8827279cfffb9226673ffffffffffffffffffffffffffffffffffffffff8316141561042257506000919050565b7370997970c51812dc3a010c7d01b50e0d17dc79c873ffffffffffffffffffffffffffffffffffffffff8316141561045c57506001919050565b733c44cdddb6a900fa2b585dd299e03d12fa4293bc73ffffffffffffffffffffffffffffffffffffffff8316141561049657506002919050565b7390f79bf6eb2c4f870365e785982e1f101e93b90673ffffffffffffffffffffffffffffffffffffffff831614156104d057506003919050565b7315d34aaf54267db7d7c367839aaf71a00a2c6a6573ffffffffffffffffffffffffffffffffffffffff8316141561050a57506004919050565b739965507d1a55bcc2695c58ba16fb37d819b0a4dc73ffffffffffffffffffffffffffffffffffffffff8316141561054457506005919050565b73976ea74026e726554db657fa54763abd0c3a0aa973ffffffffffffffffffffffffffffffffffffffff8316141561057e57506006919050565b7314dc79964da2c08b23698b3d3cc7ca32193d995573ffffffffffffffffffffffffffffffffffffffff831614156105b857506007919050565b7323618e81e3f5cdf7f54c3d65f7fbc0abf5b21e8f73ffffffffffffffffffffffffffffffffffffffff831614156105f257506008919050565b73a0ee7a142d267c1f36714e4a8f75612f20a7972073ffffffffffffffffffffffffffffffffffffffff8316141561062c57506009919050565b73bcd4042de499d14e55001ccbb24a551f3b95409673ffffffffffffffffffffffffffffffffffffffff831614156106665750600a919050565b7371be63f3384f5fb98995898a86b02fb2426c578873ffffffffffffffffffffffffffffffffffffffff831614156106a05750600b919050565b73fabb0ac9d68b0b445fb7357272ff202c5651694a73ffffffffffffffffffffffffffffffffffffffff831614156106da5750600c919050565b731cbd3b2770909d4e10f157cabc84c7264073c9ec73ffffffffffffffffffffffffffffffffffffffff831614156107145750600d919050565b73df3e18d64bc6a983f673ab319ccae4f1a57c709773ffffffffffffffffffffffffffffffffffffffff8316141561074e5750600e919050565b73cd3b766ccdd6ae721141f452c550ca635964ce7173ffffffffffffffffffffffffffffffffffffffff831614156107885750600f919050565b732546bcd3c84621e976d8185a91a922ae77ecec3073ffffffffffffffffffffffffffffffffffffffff831614156107c257506010919050565b73bda5747bfd65f08deb54cb465eb87d40e51b197e73ffffffffffffffffffffffffffffffffffffffff831614156107fc57506011919050565b73dd2fd4581271e230360230f9337d5c0430bf44c073ffffffffffffffffffffffffffffffffffffffff8316141561083657506012919050565b738626f6940e2eb28930efb4cef49b2d1f2c9c119973ffffffffffffffffffffffffffffffffffffffff8316141561087057506013919050565b6040517fec459bc000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff831660048201526024016103bd565b60606103d182610bd9565b6000806108d0610be4565b905060006108dd82610cfb565b61ffff1690508061091a576040517f8552ff3c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6109256002836119c0565b915060005b81811015610a1957600061093d84610d4e565b905060008061094d6068876119c0565b9050600061095b8236611a29565b80359350905065ffffffffffff83166109a0576040517f336dc9d000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b876109b5578265ffffffffffff1697506109f6565b878365ffffffffffff16146109f6576040517fd9d1f46500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610a0084886119c0565b9650505050508080610a1190611a40565b91505061092a565b50505090565b60006103d182610b4d565b60006103d182610a74565b60006103d182610d8a565b60606040517f608b530700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000738626f6940e2eb28930efb4cef49b2d1f2c9c119973ffffffffffffffffffffffffffffffffffffffff83161415610af2576040517fec459bc000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff831660048201526024016103bd565b6103d1826103e6565b6000610b056108c5565b905090565b6501812f2590c0811015610b4a576040517f355b874300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b604080516001808252818301909252600091829190602080830190803683370190505090508281600081518110610b9457634e487b7160e01b600052603260045260246000fd5b602002602001018181525050610ba981610bd9565b600081518110610bc957634e487b7160e01b600052603260045260246000fd5b6020026020010151915050919050565b60606103d182610d95565b60006602ed57011e0000601f1936013581161480610c2e576040517fe7764c9e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60003660291115610c6b576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd736013560006009610ca4600362ffffff85166119c0565b610cae91906119c0565b905036610cbc6002836119c0565b1115610cf4576040517fc30a7bd700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b9392505050565b600080610d096020846119c0565b905036811115610d45576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b36033592915050565b6000806000610d5c84610f88565b9092509050604e610d6e8260206119c0565b610d7890846119ec565b610d8291906119c0565b949350505050565b60006103d182610fdf565b60606000825167ffffffffffffffff811115610dc157634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610dea578160200160208202803683370190505b5090506000835167ffffffffffffffff811115610e1757634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610e40578160200160208202803683370190505b5090506000845167ffffffffffffffff811115610e6d57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610ea057816020015b6060815260200190600190039081610e8b5790505b50905060005b8551811015610f0e5760408051600a808252610160820190925290602082016101408036833701905050828281518110610ef057634e487b7160e01b600052603260045260246000fd5b60200260200101819052508080610f0690611a40565b915050610ea6565b506000610f19610be4565b90506000610f2682610cfb565b61ffff169050610f376002836119c0565b60405190925060005b82811015610f7d576000610f578a898989896110db565b9050610f6381866119c0565b945082604052508080610f7590611a40565b915050610f40565b5061035384876113e5565b600080808080610f996041876119c0565b90506000610fb2610fab6020846119c0565b369061155d565b803594509050610fc381600361155d565b62ffffff9490941697933563ffffffff16965092945050505050565b600081516000141561101d576040517f9e198af900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61102682611569565b60006002835161103691906119d8565b9050600283516110469190611a79565b6110bb5760006110ae8461105b600185611a29565b8151811061107957634e487b7160e01b600052603260045260246000fd5b60200260200101518584815181106110a157634e487b7160e01b600052603260045260246000fd5b60200260200101516115b7565b9050610d826002826119d8565b828181518110610bc957634e487b7160e01b600052603260045260246000fd5b6000806000806110ea85610f88565b909250905060008080606081600d61110d6111066020896119c0565b89906115c3565b61111791906119c0565b90506000611129610fab60688d6119c0565b905060006111468361113c60418f6119c0565b610fab91906119c0565b90506111528382611165565b9350826020850120945081359650611189565b60408051838152602081850181019092526000910183838237601f19019392505050565b61119a8765ffffffffffff16610b0a565b6111ae856111a960418f6119c0565b6115cf565b95506111b9866103c6565b60ff1699505050505050505060008060005b848110156113b2576111de888583611647565b909350915060005b8c5181101561139f578c818151811061120f57634e487b7160e01b600052603260045260246000fd5b602002602001015184141561138d5760008b828151811061124057634e487b7160e01b600052603260045260246000fd5b6020026020010151905061125981896001901b16151590565b1580156112905750600a60ff168d838151811061128657634e487b7160e01b600052603260045260246000fd5b6020026020010151105b15611387578c82815181106112b557634e487b7160e01b600052603260045260246000fd5b6020026020010180518091906112ca90611a40565b81525050838b83815181106112ef57634e487b7160e01b600052603260045260246000fd5b602002602001015160018f858151811061131957634e487b7160e01b600052603260045260246000fd5b602002602001015161132b9190611a29565b8151811061134957634e487b7160e01b600052603260045260246000fd5b60209081029190910101526001881b81178c838151811061137a57634e487b7160e01b600052603260045260246000fd5b6020026020010181815250505b5061139f565b8061139781611a40565b9150506111e6565b50806113aa81611a40565b9150506111cb565b505050816020826113c391906119c0565b6113cd91906119ec565b6113d890604e6119c0565b9998505050505050505050565b60606000835167ffffffffffffffff81111561141157634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561143a578160200160208202803683370190505b509050600a60005b8551811015611553578185828151811061146c57634e487b7160e01b600052603260045260246000fd5b602002602001015110156114e05784818151811061149a57634e487b7160e01b600052603260045260246000fd5b6020026020010151826040517f2b13aef50000000000000000000000000000000000000000000000000000000081526004016103bd929190918252602082015260400190565b600061151287838151811061150557634e487b7160e01b600052603260045260246000fd5b6020026020010151610a35565b90508084838151811061153557634e487b7160e01b600052603260045260246000fd5b6020908102919091010152508061154b81611a40565b915050611442565b5090949350505050565b6000610cf48284611a29565b8051602082016020820281019150805b828110156115b157815b818110156115a857815181518082101561159e578084528183525b5050602001611583565b50602001611579565b50505050565b6000610cf482846119c0565b6000610cf482846119ec565b60408051600080825260208083018085528690523685900380850135831a948401859052803560608501819052910135608084018190529193909260019060a0016020604051602081039080840390855afa158015611632573d6000803e3d6000fd5b5050604051601f190151979650505050505050565b60008080611656604e876119c0565b9050600061168361167c61166b6020896119c0565b6116768860016119c0565b906115c3565b83906115b7565b90506000611691368361155d565b80359960209091013598509650505050505050565b600082601f8301126116b6578081fd5b813567ffffffffffffffff8111156116d0576116d0611ab9565b6116e36020601f19601f8401160161196b565b8181528460208386010111156116f7578283fd5b816020850160208301379081016020019190915292915050565b600060208284031215611722578081fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114610cf4578182fd5b60006020808385031215611757578182fd5b823567ffffffffffffffff81111561176d578283fd5b8301601f8101851361177d578283fd5b803561179061178b8261199c565b61196b565b80828252848201915084840188868560051b87010111156117af578687fd5b8694505b838510156117d15780358352600194909401939185019185016117b3565b50979650505050505050565b6000602082840312156117ee578081fd5b5035919050565b600080600080600080600060e0888a03121561180f578283fd5b8735965060208801359550604088013567ffffffffffffffff80821115611834578485fd5b6118408b838c016116a6565b965060608a0135915080821115611855578485fd5b6118618b838c016116a6565b955060808a0135915080821115611876578485fd5b6118828b838c016116a6565b945060a08a0135915080821115611897578384fd5b6118a38b838c016116a6565b935060c08a01359150808211156118b8578283fd5b506118c58a828b016116a6565b91505092959891949750929550565b6020808252825182820181905260009190848201906040850190845b8181101561190c578351835292840192918401916001016118f0565b50909695505050505050565b6000602080835283518082850152825b8181101561194457858101830151858201604001528201611928565b818111156119555783604083870101525b50601f01601f1916929092016040019392505050565b604051601f8201601f1916810167ffffffffffffffff8111828210171561199457611994611ab9565b604052919050565b600067ffffffffffffffff8211156119b6576119b6611ab9565b5060051b60200190565b600082198211156119d3576119d3611a8d565b500190565b6000826119e7576119e7611aa3565b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611a2457611a24611a8d565b500290565b600082821015611a3b57611a3b611a8d565b500390565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611a7257611a72611a8d565b5060010190565b600082611a8857611a88611aa3565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220691c557edf4bfc6a3967faaa2789430954f26f732ff7e6871f07d108e6a45eef64736f6c63430008040033";
const isSuperArgs = (xs) => xs.length > 1;
class SampleRedstoneConsumerNumericMock__factory extends ethers_1.ContractFactory {
    constructor(...args) {
        if (isSuperArgs(args)) {
            super(...args);
        }
        else {
            super(_abi, _bytecode, args[0]);
        }
    }
    deploy(overrides) {
        return super.deploy(overrides || {});
    }
    getDeployTransaction(overrides) {
        return super.getDeployTransaction(overrides || {});
    }
    attach(address) {
        return super.attach(address);
    }
    connect(signer) {
        return super.connect(signer);
    }
    static bytecode = _bytecode;
    static abi = _abi;
    static createInterface() {
        return new ethers_1.utils.Interface(_abi);
    }
    static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
    }
}
exports.SampleRedstoneConsumerNumericMock__factory = SampleRedstoneConsumerNumericMock__factory;
//# sourceMappingURL=SampleRedstoneConsumerNumericMock__factory.js.map