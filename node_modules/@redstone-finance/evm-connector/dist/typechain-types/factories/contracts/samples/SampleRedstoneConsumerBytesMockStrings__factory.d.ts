import { Signer, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type { SampleRedstoneConsumerBytesMockStrings, SampleRedstoneConsumerBytesMockStringsInterface } from "../../../contracts/samples/SampleRedstoneConsumerBytesMockStrings";
type SampleRedstoneConsumerBytesMockStringsConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class SampleRedstoneConsumerBytesMockStrings__factory extends ContractFactory {
    constructor(...args: SampleRedstoneConsumerBytesMockStringsConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<SampleRedstoneConsumerBytesMockStrings>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): SampleRedstoneConsumerBytesMockStrings;
    connect(signer: Signer): SampleRedstoneConsumerBytesMockStrings__factory;
    static readonly bytecode = "0x608060405234801561001057600080fd5b506119a7806100206000396000f3fe608060405234801561001057600080fd5b50600436106100d45760003560e01c806395262d9f11610081578063d22158fa1161005b578063d22158fa1461019b578063f50b2efe146101ae578063f90c4924146101c157600080fd5b806395262d9f1461016d578063b24ebfcc14610180578063c274583a1461019357600080fd5b8063429989f0116100b2578063429989f01461012f57806355a547d5146101425780638e1d82011461015857600080fd5b80630504835b146100d957806313bc58db146100f75780633ce142f51461010a575b600080fd5b6100e16101c8565b6040516100ee9190611852565b60405180910390f35b6100e16101053660046116e3565b610256565b61011d6101183660046116af565b6103c4565b60405160ff90911681526020016100ee565b61011d61013d3660046116af565b6103d5565b61014a6108ae565b6040519081526020016100ee565b61016b6101663660046117c1565b610a08565b005b61011d61017b3660046116af565b610a2e565b61014a61018e3660046116e3565b610a39565b6100e1610a4c565b61011d6101a93660046116af565b610a80565b61016b6101bc3660046117c1565b610b07565b600361011d565b600080546101d5906118d1565b80601f0160208091040260200160405190810160405280929190818152602001828054610201906118d1565b801561024e5780601f106102235761010080835404028352916020019161024e565b820191906000526020600020905b81548152906001019060200180831161023157829003601f168201915b505050505081565b60606000825111610293576040517f6c2325dc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3660006102c7846000815181106102ba57634e487b7160e01b600052603260045260246000fd5b6020026020010151610b4a565b91509150600082826040516102dd929190611842565b604051908190039020905060015b85518110156103835736600061031a8884815181106102ba57634e487b7160e01b600052603260045260246000fd5b9150915083828260405161032f929190611842565b60405180910390201461036e576040517fece458ec00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050808061037b9061190c565b9150506102eb565b5082828080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509298975050505050505050565b60006103cf82610a2e565b92915050565b600073f39fd6e51aad88f6f4ce6ab8827279cfffb9226673ffffffffffffffffffffffffffffffffffffffff8316141561041157506000919050565b7370997970c51812dc3a010c7d01b50e0d17dc79c873ffffffffffffffffffffffffffffffffffffffff8316141561044b57506001919050565b733c44cdddb6a900fa2b585dd299e03d12fa4293bc73ffffffffffffffffffffffffffffffffffffffff8316141561048557506002919050565b7390f79bf6eb2c4f870365e785982e1f101e93b90673ffffffffffffffffffffffffffffffffffffffff831614156104bf57506003919050565b7315d34aaf54267db7d7c367839aaf71a00a2c6a6573ffffffffffffffffffffffffffffffffffffffff831614156104f957506004919050565b739965507d1a55bcc2695c58ba16fb37d819b0a4dc73ffffffffffffffffffffffffffffffffffffffff8316141561053357506005919050565b73976ea74026e726554db657fa54763abd0c3a0aa973ffffffffffffffffffffffffffffffffffffffff8316141561056d57506006919050565b7314dc79964da2c08b23698b3d3cc7ca32193d995573ffffffffffffffffffffffffffffffffffffffff831614156105a757506007919050565b7323618e81e3f5cdf7f54c3d65f7fbc0abf5b21e8f73ffffffffffffffffffffffffffffffffffffffff831614156105e157506008919050565b73a0ee7a142d267c1f36714e4a8f75612f20a7972073ffffffffffffffffffffffffffffffffffffffff8316141561061b57506009919050565b73bcd4042de499d14e55001ccbb24a551f3b95409673ffffffffffffffffffffffffffffffffffffffff831614156106555750600a919050565b7371be63f3384f5fb98995898a86b02fb2426c578873ffffffffffffffffffffffffffffffffffffffff8316141561068f5750600b919050565b73fabb0ac9d68b0b445fb7357272ff202c5651694a73ffffffffffffffffffffffffffffffffffffffff831614156106c95750600c919050565b731cbd3b2770909d4e10f157cabc84c7264073c9ec73ffffffffffffffffffffffffffffffffffffffff831614156107035750600d919050565b73df3e18d64bc6a983f673ab319ccae4f1a57c709773ffffffffffffffffffffffffffffffffffffffff8316141561073d5750600e919050565b73cd3b766ccdd6ae721141f452c550ca635964ce7173ffffffffffffffffffffffffffffffffffffffff831614156107775750600f919050565b732546bcd3c84621e976d8185a91a922ae77ecec3073ffffffffffffffffffffffffffffffffffffffff831614156107b157506010919050565b73bda5747bfd65f08deb54cb465eb87d40e51b197e73ffffffffffffffffffffffffffffffffffffffff831614156107eb57506011919050565b73dd2fd4581271e230360230f9337d5c0430bf44c073ffffffffffffffffffffffffffffffffffffffff8316141561082557506012919050565b738626f6940e2eb28930efb4cef49b2d1f2c9c119973ffffffffffffffffffffffffffffffffffffffff8316141561085f57506013919050565b6040517fec459bc000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff831660048201526024015b60405180910390fd5b6000806108b9610bba565b905060006108c682610ce8565b61ffff16905080610903576040517f8552ff3c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61090e600283611865565b915060005b81811015610a0257600061092684610d3b565b9050600080610936606887611865565b9050600061094482366118ba565b80359350905065ffffffffffff8316610989576040517f336dc9d000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8761099e578265ffffffffffff1697506109df565b878365ffffffffffff16146109df576040517fd9d1f46500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6109e98488611865565b96505050505080806109fa9061190c565b915050610913565b50505090565b6000610a1382610d77565b8051909150610a29906000906020840190611616565b505050565b60006103cf82610a80565b600080610a4583610256565b9392505050565b60606040517f608b530700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000738626f6940e2eb28930efb4cef49b2d1f2c9c119973ffffffffffffffffffffffffffffffffffffffff83161415610afe576040517fec459bc000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff831660048201526024016108a5565b6103cf826103d5565b6501812f2590c0811015610b47576040517f355b874300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b36600080610b588460801c90565b90506fffffffffffffffffffffffffffffffff841636610b788284611865565b1115610bb0576040517fb0e86e5100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b9094909350915050565b60006602ed57011e00007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe036013581161480610c22576040517fe7764c9e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60003660291115610c5f576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd736013560006009610c98600362ffffff8516611865565b610ca29190611865565b905036610cb0600283611865565b1115610a45576040517fc30a7bd700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080610cf6602084611865565b905036811115610d32576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b36033592915050565b6000806000610d4984610e04565b9092509050604e610d5b826020611865565b610d65908461187d565b610d6f9190611865565b949350505050565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110610dbf57634e487b7160e01b600052603260045260246000fd5b602002602001018181525050610dd481610e5b565b600081518110610df457634e487b7160e01b600052603260045260246000fd5b6020026020010151915050919050565b600080808080610e15604187611865565b90506000610e2e610e27602084611865565b3690610e68565b803594509050610e3f816003610e68565b62ffffff9490941697933563ffffffff16965092945050505050565b60606000610a4583610e74565b6000610a4582846118ba565b60606000825167ffffffffffffffff811115610ea057634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610ec9578160200160208202803683370190505b5090506000835167ffffffffffffffff811115610ef657634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610f1f578160200160208202803683370190505b5090506000845167ffffffffffffffff811115610f4c57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610f7f57816020015b6060815260200190600190039081610f6a5790505b50905060005b8551811015610feb5760408051600380825260808201909252906020820160608036833701905050828281518110610fcd57634e487b7160e01b600052603260045260246000fd5b60200260200101819052508080610fe39061190c565b915050610f85565b506000610ff6610bba565b9050600061100382610ce8565b61ffff169050611014600283611865565b60405190925060005b8281101561105a5760006110348a89898989611071565b90506110408186611865565b9450826040525080806110529061190c565b91505061101d565b506110658487611399565b98975050505050505050565b60008060008061108085610e04565b909250905060008080606081600d6110a361109c602089611865565b8990611511565b6110ad9190611865565b905060006110bf610e2760688d611865565b905060006110dc836110d260418f611865565b610e279190611865565b90506110e883826110fb565b935082602085012094508135965061113d565b604080518381526020818501810190925260009101838382377fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0019392505050565b61114e8765ffffffffffff16610b07565b6111628561115d60418f611865565b61151d565b955061116d866103c4565b60ff1699505050505050505060008060005b84811015611366576111928885836115b3565b909350915060005b8c51811015611353578c81815181106111c357634e487b7160e01b600052603260045260246000fd5b60200260200101518414156113415760008b82815181106111f457634e487b7160e01b600052603260045260246000fd5b6020026020010151905061120d81896001901b16151590565b1580156112445750600360ff168d838151811061123a57634e487b7160e01b600052603260045260246000fd5b6020026020010151105b1561133b578c828151811061126957634e487b7160e01b600052603260045260246000fd5b60200260200101805180919061127e9061190c565b81525050838b83815181106112a357634e487b7160e01b600052603260045260246000fd5b602002602001015160018f85815181106112cd57634e487b7160e01b600052603260045260246000fd5b60200260200101516112df91906118ba565b815181106112fd57634e487b7160e01b600052603260045260246000fd5b60209081029190910101526001881b81178c838151811061132e57634e487b7160e01b600052603260045260246000fd5b6020026020010181815250505b50611353565b8061134b8161190c565b91505061119a565b508061135e8161190c565b91505061117f565b505050816020826113779190611865565b611381919061187d565b61138c90604e611865565b9998505050505050505050565b60606000835167ffffffffffffffff8111156113c557634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156113ee578160200160208202803683370190505b509050600360005b8551811015611507578185828151811061142057634e487b7160e01b600052603260045260246000fd5b602002602001015110156114945784818151811061144e57634e487b7160e01b600052603260045260246000fd5b6020026020010151826040517f2b13aef50000000000000000000000000000000000000000000000000000000081526004016108a5929190918252602082015260400190565b60006114c68783815181106114b957634e487b7160e01b600052603260045260246000fd5b6020026020010151610a39565b9050808483815181106114e957634e487b7160e01b600052603260045260246000fd5b602090810291909101015250806114ff8161190c565b9150506113f6565b5090949350505050565b6000610a45828461187d565b60408051600080825260208083018085528690523685900380850135831a948401859052803560608501819052910135608084018190529193909260019060a0016020604051602081039080840390855afa158015611580573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00151979650505050505050565b600080806115c2604e87611865565b905060006115e56115d4602088611865565b6115df876001611865565b90611511565b6115ef9083611865565b905060006115fd3683610e68565b803599602090910160801b979097179750505050505050565b828054611622906118d1565b90600052602060002090601f016020900481019282611644576000855561168a565b82601f1061165d57805160ff191683800117855561168a565b8280016001018555821561168a579182015b8281111561168a57825182559160200191906001019061166f565b5061169692915061169a565b5090565b5b80821115611696576000815560010161169b565b6000602082840312156116c0578081fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114610a45578182fd5b600060208083850312156116f5578182fd5b823567ffffffffffffffff8082111561170c578384fd5b818501915085601f83011261171f578384fd5b8135818111156117315761173161195b565b8060051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f830116810181811085821117156117745761177461195b565b604052828152858101935084860182860187018a1015611792578788fd5b8795505b838610156117b4578035855260019590950194938601938601611796565b5098975050505050505050565b6000602082840312156117d2578081fd5b5035919050565b60008151808452815b818110156117fe576020818501810151868301820152016117e2565b8181111561180f5782602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b8183823760009101908152919050565b602081526000610a4560208301846117d9565b6000821982111561187857611878611945565b500190565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156118b5576118b5611945565b500290565b6000828210156118cc576118cc611945565b500390565b600181811c908216806118e557607f821691505b6020821081141561190657634e487b7160e01b600052602260045260246000fd5b50919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561193e5761193e611945565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220cf5e237a8fdcb1f7db830e1853e83b27fbd15b6e9193a0327d81fcafc5e2ab1a64736f6c63430008040033";
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "CalldataMustHaveValidPayload";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "CalldataOverOrUnderFlow";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "DataPackageTimestampMustNotBeZero";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "DataPackageTimestampsMustBeEqual";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "EachSignerMustProvideTheSameValue";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "EmptyCalldataPointersArr";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "GetDataServiceIdNotImplemented";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "IncorrectUnsignedMetadataSize";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "receivedSignersCount";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "requiredSignersCount";
            readonly type: "uint256";
        }];
        readonly name: "InsufficientNumberOfUniqueSigners";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidCalldataPointer";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "RedstonePayloadMustHaveAtLeastOneDataPackage";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "receivedSigner";
            readonly type: "address";
        }];
        readonly name: "SignerNotAuthorised";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "TimestampIsNotValid";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256[]";
            readonly name: "calldataPointersForValues";
            readonly type: "uint256[]";
        }];
        readonly name: "aggregateByteValues";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256[]";
            readonly name: "calldataPointersToValues";
            readonly type: "uint256[]";
        }];
        readonly name: "aggregateValues";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "pointerToResultBytesInMemory";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "extractTimestampsAndAssertAllAreEqual";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "extractedTimestamp";
            readonly type: "uint256";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "signerAddress";
            readonly type: "address";
        }];
        readonly name: "getAllMockAuthorised";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "signerAddress";
            readonly type: "address";
        }];
        readonly name: "getAllMockExceptLastOneAuthorised";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "signerAddress";
            readonly type: "address";
        }];
        readonly name: "getAuthorisedMockSignerIndex";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "signerAddress";
            readonly type: "address";
        }];
        readonly name: "getAuthorisedSignerIndex";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getDataServiceId";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getUniqueSignersThreshold";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "latestString";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "dataFeedId";
            readonly type: "bytes32";
        }];
        readonly name: "saveLatestValueInStorage";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "receivedTimestampMilliseconds";
            readonly type: "uint256";
        }];
        readonly name: "validateTimestamp";
        readonly outputs: readonly [];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): SampleRedstoneConsumerBytesMockStringsInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): SampleRedstoneConsumerBytesMockStrings;
}
export {};
//# sourceMappingURL=SampleRedstoneConsumerBytesMockStrings__factory.d.ts.map