import { Signer, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type { SampleStorageProxy, SampleStorageProxyInterface } from "../../../contracts/samples/SampleStorageProxy";
type SampleStorageProxyConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class SampleStorageProxy__factory extends ContractFactory {
    constructor(...args: SampleStorageProxyConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<SampleStorageProxy>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): SampleStorageProxy;
    connect(signer: Signer): SampleStorageProxy__factory;
    static readonly bytecode = "0x608060405234801561001057600080fd5b506125cf806100206000396000f3fe608060405234801561001057600080fd5b506004361061016c5760003560e01c806395262d9f116100cd578063df2c65b311610081578063f50b2efe11610066578063f50b2efe14610359578063f5bcb8d61461036c578063f90c49241461038c57600080fd5b8063df2c65b314610326578063ec5986c81461033957600080fd5b8063b24ebfcc116100b2578063b24ebfcc146102eb578063c274583a146102fe578063d22158fa1461031357600080fd5b806395262d9f146102c55780639b606ed9146102d857600080fd5b8063429989f01161012457806355a547d51161010957806355a547d51461028a5780636d90217f1461029257806381fc6884146102a557600080fd5b8063429989f0146102225780634420e4861461023557600080fd5b80632fb8176b116101555780632fb8176b146101c85780633ce142f5146101e85780633d60fee31461020d57600080fd5b80630a709a05146101715780632a5284a91461019a575b600080fd5b61018461017f366004612097565b610393565b6040516101919190612390565b60405180910390f35b6101ba6101a83660046121b6565b60016020526000908152604090205481565b604051908152602001610191565b6101db6101d6366004612097565b61068a565b6040516101919190612357565b6101fb6101f6366004612063565b6107d0565b60405160ff9091168152602001610191565b61022061021b3660046121b6565b6107e1565b005b6101fb610230366004612063565b6107fc565b610220610243366004612063565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6101ba610cd5565b6101ba6102a03660046121b6565b610e2f565b6102b86102b33660046121b6565b610eec565b604051610191919061237d565b6101fb6102d3366004612063565b611007565b6101db6102e6366004612097565b611012565b6101ba6102f9366004612097565b6110f5565b610306611100565b604051610191919061236a565b6101fb610321366004612063565b611134565b610220610334366004612097565b6111bb565b61034c610347366004612097565b611252565b60405161019191906122d8565b6102206103673660046121b6565b6114c2565b6101ba61037a3660046121b6565b60009081526001602052604090205490565b600a6101fb565b604080518082019091526060808252602082015260006103b283611505565b905060005b8351811015610439578181815181106103e057634e487b7160e01b600052603260045260246000fd5b60200260200101516001600086848151811061040c57634e487b7160e01b600052603260045260246000fd5b602002602001015181526020019081526020016000208190555080806104319061250a565b9150506103b7565b50600080546040517f9b606ed900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911690639b606ed990610491908790600401612294565b60006040518083038186803b1580156104a957600080fd5b505afa1580156104bd573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104e5919081019061212f565b905060006040518060400160405280865167ffffffffffffffff81111561051c57634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561054f57816020015b606081526020019060019003908161053a5790505b508152602001865167ffffffffffffffff81111561057d57634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156105a6578160200160208202803683370190505b509052905060005b85518110156106815760408051808201909152600681527f73616d706c6500000000000000000000000000000000000000000000000000006020820152825180518390811061060d57634e487b7160e01b600052603260045260246000fd5b602002602001018190525082818151811061063857634e487b7160e01b600052603260045260246000fd5b60200260200101518260200151828151811061066457634e487b7160e01b600052603260045260246000fd5b6020908102919091010152806106798161250a565b9150506105ae565b50949350505050565b6060600061069783611505565b905060005b835181101561071e578181815181106106c557634e487b7160e01b600052603260045260246000fd5b6020026020010151600160008684815181106106f157634e487b7160e01b600052603260045260246000fd5b602002602001015181526020019081526020016000208190555080806107169061250a565b91505061069c565b506000546040517f9b606ed900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911690639b606ed990610775908690600401612294565b60006040518083038186803b15801561078d57600080fd5b505afa1580156107a1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107c9919081019061212f565b9392505050565b60006107db82611007565b92915050565b6107ea81611510565b60009182526001602052604090912055565b600073f39fd6e51aad88f6f4ce6ab8827279cfffb9226673ffffffffffffffffffffffffffffffffffffffff8316141561083857506000919050565b7370997970c51812dc3a010c7d01b50e0d17dc79c873ffffffffffffffffffffffffffffffffffffffff8316141561087257506001919050565b733c44cdddb6a900fa2b585dd299e03d12fa4293bc73ffffffffffffffffffffffffffffffffffffffff831614156108ac57506002919050565b7390f79bf6eb2c4f870365e785982e1f101e93b90673ffffffffffffffffffffffffffffffffffffffff831614156108e657506003919050565b7315d34aaf54267db7d7c367839aaf71a00a2c6a6573ffffffffffffffffffffffffffffffffffffffff8316141561092057506004919050565b739965507d1a55bcc2695c58ba16fb37d819b0a4dc73ffffffffffffffffffffffffffffffffffffffff8316141561095a57506005919050565b73976ea74026e726554db657fa54763abd0c3a0aa973ffffffffffffffffffffffffffffffffffffffff8316141561099457506006919050565b7314dc79964da2c08b23698b3d3cc7ca32193d995573ffffffffffffffffffffffffffffffffffffffff831614156109ce57506007919050565b7323618e81e3f5cdf7f54c3d65f7fbc0abf5b21e8f73ffffffffffffffffffffffffffffffffffffffff83161415610a0857506008919050565b73a0ee7a142d267c1f36714e4a8f75612f20a7972073ffffffffffffffffffffffffffffffffffffffff83161415610a4257506009919050565b73bcd4042de499d14e55001ccbb24a551f3b95409673ffffffffffffffffffffffffffffffffffffffff83161415610a7c5750600a919050565b7371be63f3384f5fb98995898a86b02fb2426c578873ffffffffffffffffffffffffffffffffffffffff83161415610ab65750600b919050565b73fabb0ac9d68b0b445fb7357272ff202c5651694a73ffffffffffffffffffffffffffffffffffffffff83161415610af05750600c919050565b731cbd3b2770909d4e10f157cabc84c7264073c9ec73ffffffffffffffffffffffffffffffffffffffff83161415610b2a5750600d919050565b73df3e18d64bc6a983f673ab319ccae4f1a57c709773ffffffffffffffffffffffffffffffffffffffff83161415610b645750600e919050565b73cd3b766ccdd6ae721141f452c550ca635964ce7173ffffffffffffffffffffffffffffffffffffffff83161415610b9e5750600f919050565b732546bcd3c84621e976d8185a91a922ae77ecec3073ffffffffffffffffffffffffffffffffffffffff83161415610bd857506010919050565b73bda5747bfd65f08deb54cb465eb87d40e51b197e73ffffffffffffffffffffffffffffffffffffffff83161415610c1257506011919050565b73dd2fd4581271e230360230f9337d5c0430bf44c073ffffffffffffffffffffffffffffffffffffffff83161415610c4c57506012919050565b738626f6940e2eb28930efb4cef49b2d1f2c9c119973ffffffffffffffffffffffffffffffffffffffff83161415610c8657506013919050565b6040517fec459bc000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff831660048201526024015b60405180910390fd5b600080610ce061159c565b90506000610ced826116ac565b61ffff16905080610d2a576040517f8552ff3c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610d3560028361248a565b915060005b81811015610e29576000610d4d846116ff565b9050600080610d5d60688761248a565b90506000610d6b82366124f3565b80359350905065ffffffffffff8316610db0576040517f336dc9d000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b87610dc5578265ffffffffffff169750610e06565b878365ffffffffffff1614610e06576040517fd9d1f46500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610e10848861248a565b9650505050508080610e219061250a565b915050610d3a565b50505090565b6000610e3a82611510565b600083815260016020526040808220929092555490517ff5bcb8d60000000000000000000000000000000000000000000000000000000081526004810184905273ffffffffffffffffffffffffffffffffffffffff9091169063f5bcb8d69060240160206040518083038186803b158015610eb457600080fd5b505afa158015610ec8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107db91906121ce565b604080518082019091526060815260006020820152610f0a82611510565b60008381526001602052604080822092909255805491517ff5bcb8d600000000000000000000000000000000000000000000000000000000815260048101859052909173ffffffffffffffffffffffffffffffffffffffff169063f5bcb8d69060240160206040518083038186803b158015610f8557600080fd5b505afa158015610f99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fbd91906121ce565b6040805160808101825260069181019182527f73616d706c650000000000000000000000000000000000000000000000000000606082015290815260208101919091529392505050565b60006107db82611134565b60606000825167ffffffffffffffff81111561103e57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611067578160200160208202803683370190505b50905060005b83518110156110ee576001600085838151811061109a57634e487b7160e01b600052603260045260246000fd5b60200260200101518152602001908152602001600020548282815181106110d157634e487b7160e01b600052603260045260246000fd5b6020908102919091010152806110e68161250a565b91505061106d565b5092915050565b60006107db8261173b565b60606040517f608b530700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000738626f6940e2eb28930efb4cef49b2d1f2c9c119973ffffffffffffffffffffffffffffffffffffffff831614156111b2576040517fec459bc000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83166004820152602401610ccc565b6107db826107fc565b60006111c682611505565b905060005b825181101561124d578181815181106111f457634e487b7160e01b600052603260045260246000fd5b60200260200101516001600085848151811061122057634e487b7160e01b600052603260045260246000fd5b602002602001015181526020019081526020016000208190555080806112459061250a565b9150506111cb565b505050565b6060600061125f83611505565b905060005b83518110156112e65781818151811061128d57634e487b7160e01b600052603260045260246000fd5b6020026020010151600160008684815181106112b957634e487b7160e01b600052603260045260246000fd5b602002602001015181526020019081526020016000208190555080806112de9061250a565b915050611264565b50600080546040517f9b606ed900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911690639b606ed99061133e908790600401612294565b60006040518083038186803b15801561135657600080fd5b505afa15801561136a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611392919081019061212f565b90506000845167ffffffffffffffff8111156113be57634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561140457816020015b6040805180820190915260608152600060208201528152602001906001900390816113dc5790505b50905060005b85518110156106815760405180604001604052806040518060400160405280600681526020017f73616d706c650000000000000000000000000000000000000000000000000000815250815260200184838151811061147957634e487b7160e01b600052603260045260246000fd5b60200260200101518152508282815181106114a457634e487b7160e01b600052603260045260246000fd5b602002602001018190525080806114ba9061250a565b91505061140a565b6501812f2590c0811015611502576040517f355b874300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b60606107db82611746565b60408051600180825281830190925260009182919060208083019080368337019050509050828160008151811061155757634e487b7160e01b600052603260045260246000fd5b60200260200101818152505061156c81611505565b60008151811061158c57634e487b7160e01b600052603260045260246000fd5b6020026020010151915050919050565b60006602ed57011e0000601f19360135811614806115e6576040517fe7764c9e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60003660291115611623576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd73601356000600961165c600362ffffff851661248a565b611666919061248a565b90503661167460028361248a565b11156107c9576040517fc30a7bd700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000806116ba60208461248a565b9050368111156116f6576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b36033592915050565b600080600061170d84611945565b9092509050604e61171f82602061248a565b61172990846124b6565b611733919061248a565b949350505050565b60006107db8261199c565b60606000825167ffffffffffffffff81111561177257634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561179b578160200160208202803683370190505b5090506000835167ffffffffffffffff8111156117c857634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156117f1578160200160208202803683370190505b5090506000845167ffffffffffffffff81111561181e57634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561185157816020015b606081526020019060019003908161183c5790505b50905060005b85518110156118bf5760408051600a8082526101608201909252906020820161014080368337019050508282815181106118a157634e487b7160e01b600052603260045260246000fd5b602002602001018190525080806118b79061250a565b915050611857565b5060006118ca61159c565b905060006118d7826116ac565b61ffff1690506118e860028361248a565b60405190925060005b8281101561192e5760006119088a89898989611a98565b9050611914818661248a565b9450826040525080806119269061250a565b9150506118f1565b506119398487611da2565b98975050505050505050565b60008080808061195660418761248a565b9050600061196f61196860208461248a565b3690611f1a565b803594509050611980816003611f1a565b62ffffff9490941697933563ffffffff16965092945050505050565b60008151600014156119da576040517f9e198af900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6119e382611f26565b6000600283516119f391906124a2565b905060028351611a039190612543565b611a78576000611a6b84611a186001856124f3565b81518110611a3657634e487b7160e01b600052603260045260246000fd5b6020026020010151858481518110611a5e57634e487b7160e01b600052603260045260246000fd5b6020026020010151611f74565b90506117336002826124a2565b82818151811061158c57634e487b7160e01b600052603260045260246000fd5b600080600080611aa785611945565b909250905060008080606081600d611aca611ac360208961248a565b8990611f80565b611ad4919061248a565b90506000611ae661196860688d61248a565b90506000611b0383611af960418f61248a565b611968919061248a565b9050611b0f8382611b22565b9350826020850120945081359650611b46565b60408051838152602081850181019092526000910183838237601f19019392505050565b611b578765ffffffffffff166114c2565b611b6b85611b6660418f61248a565b611f8c565b9550611b76866107d0565b60ff1699505050505050505060008060005b84811015611d6f57611b9b888583612004565b909350915060005b8c51811015611d5c578c8181518110611bcc57634e487b7160e01b600052603260045260246000fd5b6020026020010151841415611d4a5760008b8281518110611bfd57634e487b7160e01b600052603260045260246000fd5b60200260200101519050611c1681896001901b16151590565b158015611c4d5750600a60ff168d8381518110611c4357634e487b7160e01b600052603260045260246000fd5b6020026020010151105b15611d44578c8281518110611c7257634e487b7160e01b600052603260045260246000fd5b602002602001018051809190611c879061250a565b81525050838b8381518110611cac57634e487b7160e01b600052603260045260246000fd5b602002602001015160018f8581518110611cd657634e487b7160e01b600052603260045260246000fd5b6020026020010151611ce891906124f3565b81518110611d0657634e487b7160e01b600052603260045260246000fd5b60209081029190910101526001881b81178c8381518110611d3757634e487b7160e01b600052603260045260246000fd5b6020026020010181815250505b50611d5c565b80611d548161250a565b915050611ba3565b5080611d678161250a565b915050611b88565b50505081602082611d80919061248a565b611d8a91906124b6565b611d9590604e61248a565b9998505050505050505050565b60606000835167ffffffffffffffff811115611dce57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611df7578160200160208202803683370190505b509050600a60005b8551811015611f105781858281518110611e2957634e487b7160e01b600052603260045260246000fd5b60200260200101511015611e9d57848181518110611e5757634e487b7160e01b600052603260045260246000fd5b6020026020010151826040517f2b13aef5000000000000000000000000000000000000000000000000000000008152600401610ccc929190918252602082015260400190565b6000611ecf878381518110611ec257634e487b7160e01b600052603260045260246000fd5b60200260200101516110f5565b905080848381518110611ef257634e487b7160e01b600052603260045260246000fd5b60209081029190910101525080611f088161250a565b915050611dff565b5090949350505050565b60006107c982846124f3565b8051602082016020820281019150805b82811015611f6e57815b81811015611f65578151815180821015611f5b578084528183525b5050602001611f40565b50602001611f36565b50505050565b60006107c9828461248a565b60006107c982846124b6565b60408051600080825260208083018085528690523685900380850135831a948401859052803560608501819052910135608084018190529193909260019060a0016020604051602081039080840390855afa158015611fef573d6000803e3d6000fd5b5050604051601f190151979650505050505050565b60008080612013604e8761248a565b9050600061204061203961202860208961248a565b61203388600161248a565b90611f80565b8390611f74565b9050600061204e3683611f1a565b80359960209091013598509650505050505050565b600060208284031215612074578081fd5b813573ffffffffffffffffffffffffffffffffffffffff811681146107c9578182fd5b600060208083850312156120a9578182fd5b823567ffffffffffffffff8111156120bf578283fd5b8301601f810185136120cf578283fd5b80356120e26120dd82612466565b612435565b80828252848201915084840188868560051b8701011115612101578687fd5b8694505b83851015612123578035835260019490940193918501918501612105565b50979650505050505050565b60006020808385031215612141578182fd5b825167ffffffffffffffff811115612157578283fd5b8301601f81018513612167578283fd5b80516121756120dd82612466565b80828252848201915084840188868560051b8701011115612194578687fd5b8694505b83851015612123578051835260019490940193918501918501612198565b6000602082840312156121c7578081fd5b5035919050565b6000602082840312156121df578081fd5b5051919050565b6000815180845260208085019450808401835b83811015612215578151875295820195908201906001016121f9565b509495945050505050565b60008151808452815b8181101561224557602081850181015186830182015201612229565b818111156122565782602083870101525b50601f01601f19169290920160200192915050565b60008151604084526122806040850182612220565b602093840151949093019390935250919050565b6020808252825182820181905260009190848201906040850190845b818110156122cc578351835292840192918401916001016122b0565b50909695505050505050565b6000602080830181845280855180835260408601915060408160051b8701019250838701855b8281101561234a577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc088860301845261233885835161226b565b945092850192908501906001016122fe565b5092979650505050505050565b6020815260006107c960208301846121e6565b6020815260006107c96020830184612220565b6020815260006107c9602083018461226b565b6000602080835260608301845160408386015281815180845260808701915060808160051b88010193508483019250855b8181101561240d577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff808886030183526123fb858551612220565b945092850192918501916001016123c1565b5050505090840151838203601f190160408501529061242c81836121e6565b95945050505050565b604051601f8201601f1916810167ffffffffffffffff8111828210171561245e5761245e612583565b604052919050565b600067ffffffffffffffff82111561248057612480612583565b5060051b60200190565b6000821982111561249d5761249d612557565b500190565b6000826124b1576124b161256d565b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156124ee576124ee612557565b500290565b60008282101561250557612505612557565b500390565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561253c5761253c612557565b5060010190565b6000826125525761255261256d565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220fe36e0b98e57e75491e40858a258eb06d9b27147a800ed2374e0be1931068ca164736f6c63430008040033";
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "CalldataMustHaveValidPayload";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "CalldataOverOrUnderFlow";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "CanNotPickMedianOfEmptyArray";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "DataPackageTimestampMustNotBeZero";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "DataPackageTimestampsMustBeEqual";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "EachSignerMustProvideTheSameValue";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "EmptyCalldataPointersArr";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "GetDataServiceIdNotImplemented";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "IncorrectUnsignedMetadataSize";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "receivedSignersCount";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "requiredSignersCount";
            readonly type: "uint256";
        }];
        readonly name: "InsufficientNumberOfUniqueSigners";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidCalldataPointer";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "RedstonePayloadMustHaveAtLeastOneDataPackage";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "receivedSigner";
            readonly type: "address";
        }];
        readonly name: "SignerNotAuthorised";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "TimestampIsNotValid";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256[]";
            readonly name: "values";
            readonly type: "uint256[]";
        }];
        readonly name: "aggregateValues";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "extractTimestampsAndAssertAllAreEqual";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "extractedTimestamp";
            readonly type: "uint256";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32[]";
            readonly name: "dataFeedIds";
            readonly type: "bytes32[]";
        }];
        readonly name: "fetchArrayOfStructsUsingProxyDryRun";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "string";
                readonly name: "name";
                readonly type: "string";
            }, {
                readonly internalType: "uint256";
                readonly name: "dataValue";
                readonly type: "uint256";
            }];
            readonly internalType: "struct SampleStorageProxy.SamplePoint[]";
            readonly name: "";
            readonly type: "tuple[]";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32[]";
            readonly name: "dataFeedIds";
            readonly type: "bytes32[]";
        }];
        readonly name: "fetchStructOfArraysUsingProxyDryRun";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "string[]";
                readonly name: "names";
                readonly type: "string[]";
            }, {
                readonly internalType: "uint256[]";
                readonly name: "dataValues";
                readonly type: "uint256[]";
            }];
            readonly internalType: "struct SampleStorageProxy.SamplePoints";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "dataFeedId";
            readonly type: "bytes32";
        }];
        readonly name: "fetchStructUsingProxyDryRun";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "string";
                readonly name: "name";
                readonly type: "string";
            }, {
                readonly internalType: "uint256";
                readonly name: "dataValue";
                readonly type: "uint256";
            }];
            readonly internalType: "struct SampleStorageProxy.SamplePoint";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "dataFeedId";
            readonly type: "bytes32";
        }];
        readonly name: "fetchValueUsingProxyDryRun";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32[]";
            readonly name: "dataFeedIds";
            readonly type: "bytes32[]";
        }];
        readonly name: "fetchValuesUsingProxyDryRun";
        readonly outputs: readonly [{
            readonly internalType: "uint256[]";
            readonly name: "";
            readonly type: "uint256[]";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "signerAddress";
            readonly type: "address";
        }];
        readonly name: "getAllMockAuthorised";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "signerAddress";
            readonly type: "address";
        }];
        readonly name: "getAllMockExceptLastOneAuthorised";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "signerAddress";
            readonly type: "address";
        }];
        readonly name: "getAuthorisedMockSignerIndex";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "signerAddress";
            readonly type: "address";
        }];
        readonly name: "getAuthorisedSignerIndex";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getDataServiceId";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "dataFeedId";
            readonly type: "bytes32";
        }];
        readonly name: "getOracleValue";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32[]";
            readonly name: "dataFeedIds";
            readonly type: "bytes32[]";
        }];
        readonly name: "getOracleValues";
        readonly outputs: readonly [{
            readonly internalType: "uint256[]";
            readonly name: "";
            readonly type: "uint256[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getUniqueSignersThreshold";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly name: "oracleValues";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_sampleContract";
            readonly type: "address";
        }];
        readonly name: "register";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "dataFeedId";
            readonly type: "bytes32";
        }];
        readonly name: "saveOracleValueInContractStorage";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32[]";
            readonly name: "dataFeedIds";
            readonly type: "bytes32[]";
        }];
        readonly name: "saveOracleValuesInContractStorage";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "receivedTimestampMilliseconds";
            readonly type: "uint256";
        }];
        readonly name: "validateTimestamp";
        readonly outputs: readonly [];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): SampleStorageProxyInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): SampleStorageProxy;
}
export {};
//# sourceMappingURL=SampleStorageProxy__factory.d.ts.map