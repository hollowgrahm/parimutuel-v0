import { Signer, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type { AvalancheDemoConsumerBase, AvalancheDemoConsumerBaseInterface } from "../../../contracts/data-services/AvalancheDemoConsumerBase";
type AvalancheDemoConsumerBaseConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class AvalancheDemoConsumerBase__factory extends ContractFactory {
    constructor(...args: AvalancheDemoConsumerBaseConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<AvalancheDemoConsumerBase>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): AvalancheDemoConsumerBase;
    connect(signer: Signer): AvalancheDemoConsumerBase__factory;
    static readonly bytecode = "0x608060405234801561001057600080fd5b50610b25806100206000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c8063c274583a11610050578063c274583a146100ca578063f50b2efe14610109578063f90c49241461011e57600080fd5b80633ce142f51461007757806355a547d5146100a1578063b24ebfcc146100b7575b600080fd5b61008a6100853660046107fa565b610125565b60405160ff90911681526020015b60405180910390f35b6100a96101ea565b604051908152602001610098565b6100a96100c536600461082e565b610344565b604080518082018252601781527f72656473746f6e652d6176616c616e6368652d64656d6f000000000000000000602082015290516100989190610924565b61011c61011736600461090c565b610355565b005b600161008a565b6000733a7d971de367fe15d164cdd952f64205f2d9f10c73ffffffffffffffffffffffffffffffffffffffff8316141561016157506000919050565b7341ed5321b76c045f5439ecf9e73f96c6c25b1d7573ffffffffffffffffffffffffffffffffffffffff8316141561019b57506001919050565b6040517fec459bc000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff831660048201526024015b60405180910390fd5b6000806101f5610361565b9050600061020282610496565b61ffff1690508061023f576040517f8552ff3c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61024a600283610995565b915060005b8181101561033e576000610262846104e9565b9050600080610272606887610995565b9050600061028082366109fe565b80359350905065ffffffffffff83166102c5576040517f336dc9d000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b876102da578265ffffffffffff16975061031b565b878365ffffffffffff161461031b576040517fd9d1f46500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6103258488610995565b965050505050808061033690610a15565b91505061024f565b50505090565b600061034f82610525565b92915050565b61035e81610530565b50565b60006602ed57011e00007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0360135811614806103c9576040517fe7764c9e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60003660291115610406576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd73601356000600961043f600362ffffff8516610995565b6104499190610995565b905036610457600283610995565b111561048f576040517fc30a7bd700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b9392505050565b6000806104a4602084610995565b9050368111156104e0576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b36033592915050565b60008060006104f7846105e6565b9092509050604e610509826020610995565b61051390846109c1565b61051d9190610995565b949350505050565b600061034f8261063d565b600061053e6103e8836109ad565b90508042101561059957603c61055442836109fe565b1115610595576040517fb6b0916d000000000000000000000000000000000000000000000000000000008152600481018290524260248201526044016101e1565b5050565b60b46105a582426109fe565b1115610595576040517f0321d0b5000000000000000000000000000000000000000000000000000000008152600481018290524260248201526044016101e1565b6000808080806105f7604187610995565b90506000610610610609602084610995565b3690610794565b803594509050610621816003610794565b62ffffff9490941697933563ffffffff16965092945050505050565b600081516000141561067b576040517f9e198af900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610684826107a0565b60006002835161069491906109ad565b9050600283516106a49190610a4e565b61074b57600061073e846106b96001856109fe565b815181106106f0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151858481518110610731577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516107ee565b905061051d6002826109ad565b828181518110610784577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151915050919050565b600061048f82846109fe565b8051602082016020820281019150805b828110156107e857815b818110156107df5781518151808210156107d5578084528183525b50506020016107ba565b506020016107b0565b50505050565b600061048f8284610995565b60006020828403121561080b578081fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461048f578182fd5b60006020808385031215610840578182fd5b823567ffffffffffffffff80821115610857578384fd5b818501915085601f83011261086a578384fd5b81358181111561087c5761087c610ac0565b8060051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f830116810181811085821117156108bf576108bf610ac0565b604052828152858101935084860182860187018a10156108dd578788fd5b8795505b838610156108ff5780358552600195909501949386019386016108e1565b5098975050505050505050565b60006020828403121561091d578081fd5b5035919050565b6000602080835283518082850152825b8181101561095057858101830151858201604001528201610934565b818111156109615783604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b600082198211156109a8576109a8610a62565b500190565b6000826109bc576109bc610a91565b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156109f9576109f9610a62565b500290565b600082821015610a1057610a10610a62565b500390565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610a4757610a47610a62565b5060010190565b600082610a5d57610a5d610a91565b500690565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfea26469706673582212200113dede3c3306cca84a1c56e552e54d983a7b5b8e54e48a200682e0a94e48ba64736f6c63430008040033";
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "CalldataMustHaveValidPayload";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "CalldataOverOrUnderFlow";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "CanNotPickMedianOfEmptyArray";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "DataPackageTimestampMustNotBeZero";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "DataPackageTimestampsMustBeEqual";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "EachSignerMustProvideTheSameValue";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "EmptyCalldataPointersArr";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "GetDataServiceIdNotImplemented";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "IncorrectUnsignedMetadataSize";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "receivedSignersCount";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "requiredSignersCount";
            readonly type: "uint256";
        }];
        readonly name: "InsufficientNumberOfUniqueSigners";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidCalldataPointer";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "RedstonePayloadMustHaveAtLeastOneDataPackage";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "receivedSigner";
            readonly type: "address";
        }];
        readonly name: "SignerNotAuthorised";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "receivedTimestampSeconds";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "blockTimestamp";
            readonly type: "uint256";
        }];
        readonly name: "TimestampFromTooLongFuture";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "receivedTimestampSeconds";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "blockTimestamp";
            readonly type: "uint256";
        }];
        readonly name: "TimestampIsTooOld";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256[]";
            readonly name: "values";
            readonly type: "uint256[]";
        }];
        readonly name: "aggregateValues";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "extractTimestampsAndAssertAllAreEqual";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "extractedTimestamp";
            readonly type: "uint256";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "signerAddress";
            readonly type: "address";
        }];
        readonly name: "getAuthorisedSignerIndex";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getDataServiceId";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getUniqueSignersThreshold";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "receivedTimestampMilliseconds";
            readonly type: "uint256";
        }];
        readonly name: "validateTimestamp";
        readonly outputs: readonly [];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): AvalancheDemoConsumerBaseInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): AvalancheDemoConsumerBase;
}
export {};
//# sourceMappingURL=AvalancheDemoConsumerBase__factory.d.ts.map