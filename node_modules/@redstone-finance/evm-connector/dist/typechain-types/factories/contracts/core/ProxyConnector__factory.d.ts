import { Signer, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type { ProxyConnector, ProxyConnectorInterface } from "../../../contracts/core/ProxyConnector";
type ProxyConnectorConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class ProxyConnector__factory extends ContractFactory {
    constructor(...args: ProxyConnectorConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ProxyConnector>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): ProxyConnector;
    connect(signer: Signer): ProxyConnector__factory;
    static readonly bytecode = "0x608060405234801561001057600080fd5b506104d5806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806355a547d514610030575b600080fd5b61003861004a565b60405190815260200160405180910390f35b6000806100556101a4565b90506000610062826102d9565b61ffff1690508061009f576040517f8552ff3c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6100aa6002836103cb565b915060005b8181101561019e5760006100c28461032c565b90506000806100d26068876103cb565b905060006100e08236610420565b80359350905065ffffffffffff8316610125576040517f336dc9d000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8761013a578265ffffffffffff16975061017b565b878365ffffffffffff161461017b576040517fd9d1f46500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61018584886103cb565b965050505050808061019690610437565b9150506100af565b50505090565b60006602ed57011e00007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe03601358116148061020c576040517fe7764c9e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60003660291115610249576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd736013560006009610282600362ffffff85166103cb565b61028c91906103cb565b90503661029a6002836103cb565b11156102d2576040517fc30a7bd700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b9392505050565b6000806102e76020846103cb565b905036811115610323576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b36033592915050565b600080600061033a84610368565b9092509050604e61034c8260206103cb565b61035690846103e3565b61036091906103cb565b949350505050565b6000808080806103796041876103cb565b9050600061039261038b6020846103cb565b36906103bf565b8035945090506103a38160036103bf565b62ffffff9490941697933563ffffffff16965092945050505050565b60006102d28284610420565b600082198211156103de576103de610470565b500190565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561041b5761041b610470565b500290565b60008282101561043257610432610470565b500390565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561046957610469610470565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fdfea2646970667358221220ca27fcef61ba0313a9a99ec5f0dc913537df01d8edde7dd53b133ac17a1afe8464736f6c63430008040033";
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "CalldataMustHaveValidPayload";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "CalldataOverOrUnderFlow";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "DataPackageTimestampMustNotBeZero";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "DataPackageTimestampsMustBeEqual";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "EachSignerMustProvideTheSameValue";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "EmptyCalldataPointersArr";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "IncorrectUnsignedMetadataSize";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "receivedSignersCount";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "requiredSignersCount";
            readonly type: "uint256";
        }];
        readonly name: "InsufficientNumberOfUniqueSigners";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidCalldataPointer";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "result";
            readonly type: "bytes";
        }];
        readonly name: "ProxyCalldataFailedWithCustomError";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "message";
            readonly type: "string";
        }];
        readonly name: "ProxyCalldataFailedWithStringMessage";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "ProxyCalldataFailedWithoutErrMsg";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "RedstonePayloadMustHaveAtLeastOneDataPackage";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "receivedSigner";
            readonly type: "address";
        }];
        readonly name: "SignerNotAuthorised";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "extractTimestampsAndAssertAllAreEqual";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "extractedTimestamp";
            readonly type: "uint256";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }];
    static createInterface(): ProxyConnectorInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): ProxyConnector;
}
export {};
//# sourceMappingURL=ProxyConnector__factory.d.ts.map