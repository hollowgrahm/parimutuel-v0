import { Signer, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type { RedstoneConsumerBytesMock, RedstoneConsumerBytesMockInterface } from "../../../contracts/mocks/RedstoneConsumerBytesMock";
type RedstoneConsumerBytesMockConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class RedstoneConsumerBytesMock__factory extends ContractFactory {
    constructor(...args: RedstoneConsumerBytesMockConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<RedstoneConsumerBytesMock>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): RedstoneConsumerBytesMock;
    connect(signer: Signer): RedstoneConsumerBytesMock__factory;
    static readonly bytecode = "0x608060405234801561001057600080fd5b50611016806100206000396000f3fe608060405234801561001057600080fd5b50600436106100be5760003560e01c8063b24ebfcc11610076578063d22158fa1161005b578063d22158fa14610168578063f50b2efe1461017b578063f90c49241461019057600080fd5b8063b24ebfcc1461014d578063c274583a1461016057600080fd5b8063429989f0116100a7578063429989f01461011157806355a547d51461012457806395262d9f1461013a57600080fd5b806313bc58db146100c35780633ce142f5146100ec575b600080fd5b6100d66100d1366004610d5b565b610197565b6040516100e39190610eca565b60405180910390f35b6100ff6100fa366004610d27565b610337565b60405160ff90911681526020016100e3565b6100ff61011f366004610d27565b610348565b61012c610821565b6040519081526020016100e3565b6100ff610148366004610d27565b61097b565b61012c61015b366004610d5b565b610986565b6100d6610999565b6100ff610176366004610d27565b6109cd565b61018e610189366004610e39565b610a54565b005b60036100ff565b606060008251116101d4576040517f6c2325dc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b36600061022184600081518110610214577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151610a97565b9150915060008282604051610237929190610eba565b604051908190039020905060015b85518110156102f65736600061028d888481518110610214577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b915091508382826040516102a2929190610eba565b6040518091039020146102e1576040517fece458ec00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505080806102ee90610f49565b915050610245565b5082828080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509298975050505050505050565b60006103428261097b565b92915050565b600073f39fd6e51aad88f6f4ce6ab8827279cfffb9226673ffffffffffffffffffffffffffffffffffffffff8316141561038457506000919050565b7370997970c51812dc3a010c7d01b50e0d17dc79c873ffffffffffffffffffffffffffffffffffffffff831614156103be57506001919050565b733c44cdddb6a900fa2b585dd299e03d12fa4293bc73ffffffffffffffffffffffffffffffffffffffff831614156103f857506002919050565b7390f79bf6eb2c4f870365e785982e1f101e93b90673ffffffffffffffffffffffffffffffffffffffff8316141561043257506003919050565b7315d34aaf54267db7d7c367839aaf71a00a2c6a6573ffffffffffffffffffffffffffffffffffffffff8316141561046c57506004919050565b739965507d1a55bcc2695c58ba16fb37d819b0a4dc73ffffffffffffffffffffffffffffffffffffffff831614156104a657506005919050565b73976ea74026e726554db657fa54763abd0c3a0aa973ffffffffffffffffffffffffffffffffffffffff831614156104e057506006919050565b7314dc79964da2c08b23698b3d3cc7ca32193d995573ffffffffffffffffffffffffffffffffffffffff8316141561051a57506007919050565b7323618e81e3f5cdf7f54c3d65f7fbc0abf5b21e8f73ffffffffffffffffffffffffffffffffffffffff8316141561055457506008919050565b73a0ee7a142d267c1f36714e4a8f75612f20a7972073ffffffffffffffffffffffffffffffffffffffff8316141561058e57506009919050565b73bcd4042de499d14e55001ccbb24a551f3b95409673ffffffffffffffffffffffffffffffffffffffff831614156105c85750600a919050565b7371be63f3384f5fb98995898a86b02fb2426c578873ffffffffffffffffffffffffffffffffffffffff831614156106025750600b919050565b73fabb0ac9d68b0b445fb7357272ff202c5651694a73ffffffffffffffffffffffffffffffffffffffff8316141561063c5750600c919050565b731cbd3b2770909d4e10f157cabc84c7264073c9ec73ffffffffffffffffffffffffffffffffffffffff831614156106765750600d919050565b73df3e18d64bc6a983f673ab319ccae4f1a57c709773ffffffffffffffffffffffffffffffffffffffff831614156106b05750600e919050565b73cd3b766ccdd6ae721141f452c550ca635964ce7173ffffffffffffffffffffffffffffffffffffffff831614156106ea5750600f919050565b732546bcd3c84621e976d8185a91a922ae77ecec3073ffffffffffffffffffffffffffffffffffffffff8316141561072457506010919050565b73bda5747bfd65f08deb54cb465eb87d40e51b197e73ffffffffffffffffffffffffffffffffffffffff8316141561075e57506011919050565b73dd2fd4581271e230360230f9337d5c0430bf44c073ffffffffffffffffffffffffffffffffffffffff8316141561079857506012919050565b738626f6940e2eb28930efb4cef49b2d1f2c9c119973ffffffffffffffffffffffffffffffffffffffff831614156107d257506013919050565b6040517fec459bc000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff831660048201526024015b60405180910390fd5b60008061082c610b07565b9050600061083982610c35565b61ffff16905080610876576040517f8552ff3c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610881600283610edd565b915060005b8181101561097557600061089984610c88565b90506000806108a9606887610edd565b905060006108b78236610f32565b80359350905065ffffffffffff83166108fc576040517f336dc9d000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b87610911578265ffffffffffff169750610952565b878365ffffffffffff1614610952576040517fd9d1f46500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61095c8488610edd565b965050505050808061096d90610f49565b915050610886565b50505090565b6000610342826109cd565b60008061099283610197565b9392505050565b60606040517f608b530700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000738626f6940e2eb28930efb4cef49b2d1f2c9c119973ffffffffffffffffffffffffffffffffffffffff83161415610a4b576040517fec459bc000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83166004820152602401610818565b61034282610348565b6501812f2590c0811015610a94576040517f355b874300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b36600080610aa58460801c90565b90506fffffffffffffffffffffffffffffffff841636610ac58284610edd565b1115610afd576040517fb0e86e5100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b9094909350915050565b60006602ed57011e00007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe036013581161480610b6f576040517fe7764c9e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60003660291115610bac576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd736013560006009610be5600362ffffff8516610edd565b610bef9190610edd565b905036610bfd600283610edd565b1115610992576040517fc30a7bd700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080610c43602084610edd565b905036811115610c7f576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b36033592915050565b6000806000610c9684610cc4565b9092509050604e610ca8826020610edd565b610cb29084610ef5565b610cbc9190610edd565b949350505050565b600080808080610cd5604187610edd565b90506000610cee610ce7602084610edd565b3690610d1b565b803594509050610cff816003610d1b565b62ffffff9490941697933563ffffffff16965092945050505050565b60006109928284610f32565b600060208284031215610d38578081fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114610992578182fd5b60006020808385031215610d6d578182fd5b823567ffffffffffffffff80821115610d84578384fd5b818501915085601f830112610d97578384fd5b813581811115610da957610da9610fb1565b8060051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f83011681018181108582111715610dec57610dec610fb1565b604052828152858101935084860182860187018a1015610e0a578788fd5b8795505b83861015610e2c578035855260019590950194938601938601610e0e565b5098975050505050505050565b600060208284031215610e4a578081fd5b5035919050565b60008151808452815b81811015610e7657602081850181015186830182015201610e5a565b81811115610e875782602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b8183823760009101908152919050565b6020815260006109926020830184610e51565b60008219821115610ef057610ef0610f82565b500190565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610f2d57610f2d610f82565b500290565b600082821015610f4457610f44610f82565b500390565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610f7b57610f7b610f82565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfea2646970667358221220132fed9804d964c55217f9ed202e426e8ac77cf92921c389b23b1c13bf162b3c64736f6c63430008040033";
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "CalldataMustHaveValidPayload";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "CalldataOverOrUnderFlow";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "DataPackageTimestampMustNotBeZero";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "DataPackageTimestampsMustBeEqual";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "EachSignerMustProvideTheSameValue";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "EmptyCalldataPointersArr";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "GetDataServiceIdNotImplemented";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "IncorrectUnsignedMetadataSize";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "receivedSignersCount";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "requiredSignersCount";
            readonly type: "uint256";
        }];
        readonly name: "InsufficientNumberOfUniqueSigners";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidCalldataPointer";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "RedstonePayloadMustHaveAtLeastOneDataPackage";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "receivedSigner";
            readonly type: "address";
        }];
        readonly name: "SignerNotAuthorised";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "TimestampIsNotValid";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256[]";
            readonly name: "calldataPointersForValues";
            readonly type: "uint256[]";
        }];
        readonly name: "aggregateByteValues";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256[]";
            readonly name: "calldataPointersToValues";
            readonly type: "uint256[]";
        }];
        readonly name: "aggregateValues";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "pointerToResultBytesInMemory";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "extractTimestampsAndAssertAllAreEqual";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "extractedTimestamp";
            readonly type: "uint256";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "signerAddress";
            readonly type: "address";
        }];
        readonly name: "getAllMockAuthorised";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "signerAddress";
            readonly type: "address";
        }];
        readonly name: "getAllMockExceptLastOneAuthorised";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "signerAddress";
            readonly type: "address";
        }];
        readonly name: "getAuthorisedMockSignerIndex";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "signerAddress";
            readonly type: "address";
        }];
        readonly name: "getAuthorisedSignerIndex";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getDataServiceId";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getUniqueSignersThreshold";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "receivedTimestampMilliseconds";
            readonly type: "uint256";
        }];
        readonly name: "validateTimestamp";
        readonly outputs: readonly [];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): RedstoneConsumerBytesMockInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): RedstoneConsumerBytesMock;
}
export {};
//# sourceMappingURL=RedstoneConsumerBytesMock__factory.d.ts.map