"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.retry = void 0;
const errors_1 = require("./errors");
const time_1 = require("./time");
function retry(config) {
    if (config.maxRetries === 0) {
        throw new Error(`Setting 'config.maxRetries' to 0 will never call the underlying function`);
    }
    return async (...args) => {
        const fnName = config.fnName ?? config.fn.name;
        const error = new AggregateError([], `Retry failed after ${config.maxRetries} attempts of ${fnName}`);
        for (let i = 0; i < config.maxRetries; i++) {
            try {
                return await config.fn(...args);
            }
            catch (e) {
                error.errors.push(e);
                if (config.logger) {
                    config.logger(`Retry ${i + 1}/${config.maxRetries}; Function ${fnName} failed. ${(0, errors_1.stringifyError)(e)}`);
                }
                if (config.waitBetweenMs && i !== config.maxRetries - 1) {
                    const sleepTimeBackOffMultiplier = config.backOff
                        ? Math.pow(config.backOff.backOffBase, i)
                        : 1;
                    const sleepTime = config.waitBetweenMs * sleepTimeBackOffMultiplier;
                    if (config.logger) {
                        config.logger(`Waiting ${sleepTime / 1000} s. for the next retry...`);
                    }
                    await (0, time_1.sleep)(sleepTime);
                }
            }
        }
        throw error;
    };
}
exports.retry = retry;
//# sourceMappingURL=retry.js.map