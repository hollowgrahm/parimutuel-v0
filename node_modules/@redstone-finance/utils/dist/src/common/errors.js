"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.simplifyErrorMessage = exports.stringifyError = exports.assertWithLog = exports.assertThenReturn = exports.assert = void 0;
const axios_1 = __importDefault(require("axios"));
const consola_1 = require("consola");
const logger_1 = require("../logger");
function assert(value, errMsg) {
    if (!value) {
        throw new Error(`Assertion failed: ${errMsg}`);
    }
}
exports.assert = assert;
function assertThenReturn(value, errMsg) {
    if (!value) {
        throw new Error(`Assertion failed: ${errMsg}`);
    }
    return value;
}
exports.assertThenReturn = assertThenReturn;
const assertWithLog = (condition, errMsg) => {
    const logger = (0, logger_1.loggerFactory)("utils/errors");
    if (!condition) {
        logger.error(`Assertion failed: ${errMsg}`);
    }
};
exports.assertWithLog = assertWithLog;
const STACK_LENGTH = 200;
let debug;
const stringifyStack = (stack) => {
    if (!stack) {
        return "";
    }
    debug ??= (0, logger_1.getLogLevel)() >= consola_1.LogLevel.Debug;
    if (debug) {
        return stack;
    }
    const suffix = stack.length > STACK_LENGTH ? "..." : "";
    return stack.substring(0, STACK_LENGTH - suffix.length) + suffix;
};
function stringifyError(e) {
    const error = e;
    if (error === undefined) {
        return "undefined";
    }
    else if (error instanceof AggregateError) {
        const errorMessages = error.errors.map(stringifyError);
        return `AggregateError: ${error.message}, errors: ${errorMessages.join("; ")}`;
    }
    else if (axios_1.default.isAxiosError(error)) {
        return JSON.stringify(error.response?.data) + stringifyStack(error.stack);
    }
    else if (error instanceof Error) {
        return stringifyStack(error.stack);
    }
    else if (typeof error.toJSON === "function") {
        return JSON.stringify(error.toJSON());
    }
    else {
        return `Error couldn't be handled by the stringifyError function: ${String(e)}`;
    }
}
exports.stringifyError = stringifyError;
function simplifyErrorMessage(error) {
    if (error instanceof AggregateError) {
        const errorMessages = new Set();
        for (const err of error.errors) {
            const errorString = String(err);
            const startIndex = errorString.indexOf("Original error: AggregateError: , errors:") +
                "Original error: AggregateError: , errors:".length;
            const endIndex = errorString.indexOf("\n", startIndex);
            const shortenedError = errorString.substring(startIndex, endIndex).trim();
            if (!errorMessages.has(shortenedError)) {
                errorMessages.add(shortenedError);
            }
        }
        return Array.from(errorMessages).join("\n");
    }
    else {
        return stringifyError(error);
    }
}
exports.simplifyErrorMessage = simplifyErrorMessage;
//# sourceMappingURL=errors.js.map